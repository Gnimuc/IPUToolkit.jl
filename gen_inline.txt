// poplar::layout::Vector__EnumDecl
mod.add_bits<poplar::layout::Vector>("LayoutVector", jlcxx::julia_type("CppEnum"));
// poplar::layout::VectorList__EnumDecl
mod.add_bits<poplar::layout::VectorList>("LayoutVectorList", jlcxx::julia_type("CppEnum"));
// poplar::OptionFlags__ClassDecl
auto JLOptionFlags = mod.add_type<poplar::OptionFlags>("OptionFlags");
// poplar::OptionFlags::iterator__ClassDecl
auto JLOptionFlagsiterator = mod.add_type<poplar::OptionFlags::iterator>("OptionFlagsiterator");
// poplar::GlobalExchangeFlow__StructDecl
auto JLGlobalExchangeFlow = mod.add_type<poplar::GlobalExchangeFlow>("GlobalExchangeFlow");
// poplar::GlobalExchangeConstraint__StructDecl
auto JLGlobalExchangeConstraint = mod.add_type<poplar::GlobalExchangeConstraint>("GlobalExchangeConstraint");
// poplar::IpuLinkConfiguration__EnumDecl
mod.add_bits<poplar::IpuLinkConfiguration>("PoplarIpuLinkConfiguration", jlcxx::julia_type("CppEnum"));
// poplar::IpuLinkTopology__EnumDecl
mod.add_bits<poplar::IpuLinkTopology>("PoplarIpuLinkTopology", jlcxx::julia_type("CppEnum"));
// poplar::TargetType__EnumDecl
mod.add_bits<poplar::TargetType>("PoplarTargetType", jlcxx::julia_type("CppEnum"));
// poplar::Type__ClassDecl
auto JLType = mod.add_type<poplar::Type>("Type_");
// poplar::Target__ClassDecl
auto JLTarget = mod.add_type<poplar::Target>("Target");
// poplar::Device__ClassDecl
auto JLDevice = mod.add_type<poplar::Device>("Device");
// poplar::DeviceManager__ClassDecl
auto JLDeviceManager = mod.add_type<poplar::DeviceManager>("DeviceManager");
// poplar::Executable__ClassDecl
auto JLExecutable = mod.add_type<poplar::Executable>("Executable");
// poplar::CodeletFileType__EnumDecl
mod.add_bits<poplar::CodeletFileType>("PoplarCodeletFileType", jlcxx::julia_type("CppEnum"));
// poplar::DataStreamType__EnumDecl
mod.add_bits<poplar::DataStreamType>("PoplarDataStreamType", jlcxx::julia_type("CppEnum"));
// poplar::ReplicatedStreamMode__EnumDecl
mod.add_bits<poplar::ReplicatedStreamMode>("PoplarReplicatedStreamMode", jlcxx::julia_type("CppEnum"));
// poplar::DataStream__ClassDecl
auto JLDataStream = mod.add_type<poplar::DataStream>("DataStream");
// poplar::RemoteBuffer__ClassDecl
auto JLRemoteBuffer = mod.add_type<poplar::RemoteBuffer>("RemoteBuffer");
// poplar::VertexRef__ClassDecl
auto JLVertexRef = mod.add_type<poplar::VertexRef>("VertexRef");
// poplar::FieldRef__ClassDecl
auto JLFieldRef = mod.add_type<poplar::FieldRef>("FieldRef");
// poplar::ComputeSet__ClassDecl
auto JLComputeSet = mod.add_type<poplar::ComputeSet>("ComputeSet");
// poplar::Function__ClassDecl
auto JLFunction = mod.add_type<poplar::Function>("Function");
// poplar::ProfileValue__ClassDecl
auto JLProfileValue = mod.add_type<poplar::ProfileValue>("ProfileValue");
// poplar::ProfileValue::Type__EnumDecl
mod.add_bits<poplar::ProfileValue::Type>("ProfileValueType", jlcxx::julia_type("CppEnum"));
// poplar::ProfileValue::Storage__StructDecl
auto JLProfileValueStorage = mod.add_type<poplar::ProfileValue::Storage>("ProfileValueStorage");
// poplar::poplar_error__StructDecl
auto JLPoplar_error = mod.add_type<poplar::poplar_error>("Poplar_error");
// poplar::graph_program_compilation_error__StructDecl
auto JLGraph_program_compilation_error = mod.add_type<poplar::graph_program_compilation_error>("Graph_program_compilation_error");
// poplar::graph_object_creation_error__StructDecl
auto JLGraph_object_creation_error = mod.add_type<poplar::graph_object_creation_error>("Graph_object_creation_error");
// poplar::graph_object_load_error__StructDecl
auto JLGraph_object_load_error = mod.add_type<poplar::graph_object_load_error>("Graph_object_load_error");
// poplar::no_environment__StructDecl
auto JLNo_environment = mod.add_type<poplar::no_environment>("No_environment");
// poplar::unknown_vertex_type__StructDecl
auto JLUnknown_vertex_type = mod.add_type<poplar::unknown_vertex_type>("Unknown_vertex_type");
// poplar::unknown_field__StructDecl
auto JLUnknown_field = mod.add_type<poplar::unknown_field>("Unknown_field");
// poplar::control_program_error__StructDecl
auto JLControl_program_error = mod.add_type<poplar::control_program_error>("Control_program_error");
// poplar::type_error__StructDecl
auto JLType_error = mod.add_type<poplar::type_error>("Type_error");
// poplar::index_error__StructDecl
auto JLIndex_error = mod.add_type<poplar::index_error>("Index_error");
// poplar::no_size_specified__StructDecl
auto JLNo_size_specified = mod.add_type<poplar::no_size_specified>("No_size_specified");
// poplar::graph_connection_error__StructDecl
auto JLGraph_connection_error = mod.add_type<poplar::graph_connection_error>("Graph_connection_error");
// poplar::graph_cycle_error__StructDecl
auto JLGraph_cycle_error = mod.add_type<poplar::graph_cycle_error>("Graph_cycle_error");
// poplar::graph_replication_error__StructDecl
auto JLGraph_replication_error = mod.add_type<poplar::graph_replication_error>("Graph_replication_error");
// poplar::profiling_disabled__StructDecl
auto JLProfiling_disabled = mod.add_type<poplar::profiling_disabled>("Profiling_disabled");
// poplar::missing_cycle_estimate__StructDecl
auto JLMissing_cycle_estimate = mod.add_type<poplar::missing_cycle_estimate>("Missing_cycle_estimate");
// poplar::invalid_tile_mapping__StructDecl
auto JLInvalid_tile_mapping = mod.add_type<poplar::invalid_tile_mapping>("Invalid_tile_mapping");
// poplar::tensor_creation_error__StructDecl
auto JLTensor_creation_error = mod.add_type<poplar::tensor_creation_error>("Tensor_creation_error");
// poplar::tensor_io_state_error__StructDecl
auto JLTensor_io_state_error = mod.add_type<poplar::tensor_io_state_error>("Tensor_io_state_error");
// poplar::stream_connection_error__StructDecl
auto JLStream_connection_error = mod.add_type<poplar::stream_connection_error>("Stream_connection_error");
// poplar::overflow_error__StructDecl
auto JLOverflow_error = mod.add_type<poplar::overflow_error>("Overflow_error");
// poplar::memory_elem_constraints_error__StructDecl
auto JLMemory_elem_constraints_error = mod.add_type<poplar::memory_elem_constraints_error>("Memory_elem_constraints_error");
// poplar::graph_memory_allocation_error__StructDecl
auto JLGraph_memory_allocation_error = mod.add_type<poplar::graph_memory_allocation_error>("Graph_memory_allocation_error");
// poplar::stream_memory_allocation_error__StructDecl
auto JLStream_memory_allocation_error = mod.add_type<poplar::stream_memory_allocation_error>("Stream_memory_allocation_error");
// poplar::invalid_machine_model__StructDecl
auto JLInvalid_machine_model = mod.add_type<poplar::invalid_machine_model>("Invalid_machine_model");
// poplar::invalid_option__StructDecl
auto JLInvalid_option = mod.add_type<poplar::invalid_option>("Invalid_option");
// poplar::link_error__StructDecl
auto JLLink_error = mod.add_type<poplar::link_error>("Link_error");
// poplar::runtime_error__StructDecl
auto JLRuntime_error = mod.add_type<poplar::runtime_error>("Runtime_error");
// poplar::symbol_error__StructDecl
auto JLSymbol_error = mod.add_type<poplar::symbol_error>("Symbol_error");
// poplar::file_load_error__StructDecl
auto JLFile_load_error = mod.add_type<poplar::file_load_error>("File_load_error");
// poplar::parse_error__StructDecl
auto JLParse_error = mod.add_type<poplar::parse_error>("Parse_error");
// poplar::VertexEdgeInfo__StructDecl
auto JLVertexEdgeInfo = mod.add_type<poplar::VertexEdgeInfo>("VertexEdgeInfo");
// poplar::VertexEdgeInfo::StorageInfo__StructDecl
auto JLVertexEdgeInfoStorageInfo = mod.add_type<poplar::VertexEdgeInfo::StorageInfo>("VertexEdgeInfoStorageInfo");
// poplar::SerializationFormat__EnumDecl
mod.add_bits<poplar::SerializationFormat>("PoplarSerializationFormat", jlcxx::julia_type("CppEnum"));
// poplar::SourceLocation__ClassDecl
auto JLSourceLocation = mod.add_type<poplar::SourceLocation>("SourceLocation");
// poplar::DebugSerializationFormat__EnumDecl
mod.add_bits<poplar::DebugSerializationFormat>("PoplarDebugSerializationFormat", jlcxx::julia_type("CppEnum"));
// poplar::DebugInfo__ClassDecl
auto JLDebugInfo = mod.add_type<poplar::DebugInfo>("DebugInfo");
// poplar::DebugContext__ClassDecl
auto JLDebugContext = mod.add_type<poplar::DebugContext>("DebugContext");
// poplar::SyncType__EnumDecl
mod.add_bits<poplar::SyncType>("PoplarSyncType", jlcxx::julia_type("CppEnum"));
// poplar::TypeTraits__StructDecl
auto JLTypeTraits = mod.add_type<poplar::TypeTraits>("TypeTraits");
// poplar::Tensor__ClassDecl
auto JLTensor = mod.add_type<poplar::Tensor>("Tensor");
// poplar::program::Program__ClassDecl
auto JLProgramProgram = mod.add_type<poplar::program::Program>("ProgramProgram");
// poplar::program::Execute__ClassDecl
auto JLProgramExecute = mod.add_type<poplar::program::Execute>("ProgramExecute", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::Sequence__ClassDecl
auto JLProgramSequence = mod.add_type<poplar::program::Sequence>("ProgramSequence", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::Repeat__ClassDecl
auto JLProgramRepeat = mod.add_type<poplar::program::Repeat>("ProgramRepeat", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::RepeatWhileFalse__ClassDecl
auto JLProgramRepeatWhileFalse = mod.add_type<poplar::program::RepeatWhileFalse>("ProgramRepeatWhileFalse", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::RepeatWhileTrue__ClassDecl
auto JLProgramRepeatWhileTrue = mod.add_type<poplar::program::RepeatWhileTrue>("ProgramRepeatWhileTrue", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::If__ClassDecl
auto JLProgramIf = mod.add_type<poplar::program::If>("ProgramIf", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::Switch__ClassDecl
auto JLProgramSwitch = mod.add_type<poplar::program::Switch>("ProgramSwitch", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::Copy__ClassDecl
auto JLProgramCopy = mod.add_type<poplar::program::Copy>("ProgramCopy", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::CrossReplicaCopy__ClassDecl
auto JLProgramCrossReplicaCopy = mod.add_type<poplar::program::CrossReplicaCopy>("ProgramCrossReplicaCopy", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::WriteUndef__ClassDecl
auto JLProgramWriteUndef = mod.add_type<poplar::program::WriteUndef>("ProgramWriteUndef", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::Sync__ClassDecl
auto JLProgramSync = mod.add_type<poplar::program::Sync>("ProgramSync", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::Call__ClassDecl
auto JLProgramCall = mod.add_type<poplar::program::Call>("ProgramCall", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::PrintTensor__ClassDecl
auto JLProgramPrintTensor = mod.add_type<poplar::program::PrintTensor>("ProgramPrintTensor", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::program::ErrorProgram__ClassDecl
auto JLProgramErrorProgram = mod.add_type<poplar::program::ErrorProgram>("ProgramErrorProgram", jlcxx::julia_base_type<poplar::program::Program>());
// poplar::TensorCloneMethod__EnumDecl
mod.add_bits<poplar::TensorCloneMethod>("PoplarTensorCloneMethod", jlcxx::julia_type("CppEnum"));
// poplar::TensorCloneDuplicationMethod__EnumDecl
mod.add_bits<poplar::TensorCloneDuplicationMethod>("PoplarTensorCloneDuplicationMethod", jlcxx::julia_type("CppEnum"));
// poplar::VariableMappingMethod__EnumDecl
mod.add_bits<poplar::VariableMappingMethod>("PoplarVariableMappingMethod", jlcxx::julia_type("CppEnum"));
// poplar::VariableRef__ClassDecl
auto JLVariableRef = mod.add_type<poplar::VariableRef>("VariableRef");
// poplar::VariableInterval__StructDecl
auto JLVariableInterval = mod.add_type<poplar::VariableInterval>("VariableInterval");
// poplar::FieldData__ClassDecl
auto JLFieldData = mod.add_type<poplar::FieldData>("FieldData");
// poplar::FieldData::SizeT__StructDecl
auto JLFieldDataSizeT = mod.add_type<poplar::FieldData::SizeT>("FieldDataSizeT");
// poplar::VertexIntrospector__ClassDecl
auto JLVertexIntrospector = mod.add_type<poplar::VertexIntrospector>("VertexIntrospector");
// poplar::replication_factor__StructDecl
auto JLReplication_factor = mod.add_type<poplar::replication_factor>("Replication_factor");
// poplar::Graph__ClassDecl
auto JLGraph = mod.add_type<poplar::Graph>("Graph");
// poplar::Graph::ConnectionDesc__ClassDecl
auto JLGraphConnectionDesc = mod.add_type<poplar::Graph::ConnectionDesc>("GraphConnectionDesc");
// poplar::StreamCallback__ClassDecl
auto JLStreamCallback = mod.add_type<poplar::StreamCallback>("StreamCallback");
// poplar::StreamCallback::Result__EnumDecl
mod.add_bits<poplar::StreamCallback::Result>("StreamCallbackResult", jlcxx::julia_type("CppEnum"));
// poplar::LegacyStreamCallback__ClassDecl
auto JLLegacyStreamCallback = mod.add_type<poplar::LegacyStreamCallback>("LegacyStreamCallback", jlcxx::julia_base_type<poplar::StreamCallback>());
// poplar::StreamCallbackHandle__ClassDecl
auto JLStreamCallbackHandle = mod.add_type<poplar::StreamCallbackHandle>("StreamCallbackHandle");
// poplar::Engine__ClassDecl
auto JLEngine = mod.add_type<poplar::Engine>("Engine");
// poplar::Engine::TimerTimePoint__ClassDecl
auto JLEngineTimerTimePoint = mod.add_type<poplar::Engine::TimerTimePoint>("EngineTimerTimePoint");
// poplar::IPUModel__StructDecl
auto JLIPUModel = mod.add_type<poplar::IPUModel>("IPUModel");
// poplar::IPUModel::RelativeSyncDelayType__EnumDecl
mod.add_bits<poplar::IPUModel::RelativeSyncDelayType>("IPUModelRelativeSyncDelayType", jlcxx::julia_type("CppEnum"));
// poplar::layout::Vector::NotAVector__EnumConstantDecl
mod.set_const("LayoutVectorLayoutNotAVector", poplar::layout::Vector::NotAVector);
// poplar::layout::Vector::Span__EnumConstantDecl
mod.set_const("LayoutVectorLayoutSpan", poplar::layout::Vector::Span);
// poplar::layout::Vector::ShortSpan__EnumConstantDecl
mod.set_const("LayoutVectorLayoutShortSpan", poplar::layout::Vector::ShortSpan);
// poplar::layout::Vector::OnePtr__EnumConstantDecl
mod.set_const("LayoutVectorLayoutOnePtr", poplar::layout::Vector::OnePtr);
// poplar::layout::Vector::ScaledPtr32__EnumConstantDecl
mod.set_const("LayoutVectorLayoutScaledPtr32", poplar::layout::Vector::ScaledPtr32);
// poplar::layout::Vector::ScaledPtr64__EnumConstantDecl
mod.set_const("LayoutVectorLayoutScaledPtr64", poplar::layout::Vector::ScaledPtr64);
// poplar::layout::Vector::ScaledPtr128__EnumConstantDecl
mod.set_const("LayoutVectorLayoutScaledPtr128", poplar::layout::Vector::ScaledPtr128);
// poplar::layout::to_string(const poplar::layout::Vector)__FunctionDecl
{ using namespace poplar::layout; 
mod.method("LayoutTo_String", [](const poplar::layout::Vector a) {return poplar::layout::to_string(a);} ); }
// poplar::layout::VectorList::NotAVector__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutNotAVector", poplar::layout::VectorList::NotAVector);
// poplar::layout::VectorList::OnePtr__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutOnePtr", poplar::layout::VectorList::OnePtr);
// poplar::layout::VectorList::ScaledPtr32__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutScaledPtr32", poplar::layout::VectorList::ScaledPtr32);
// poplar::layout::VectorList::ScaledPtr64__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutScaledPtr64", poplar::layout::VectorList::ScaledPtr64);
// poplar::layout::VectorList::ScaledPtr128__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutScaledPtr128", poplar::layout::VectorList::ScaledPtr128);
// poplar::layout::VectorList::DeltaN__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutDeltaN", poplar::layout::VectorList::DeltaN);
// poplar::layout::VectorList::DeltaNElements__EnumConstantDecl
mod.set_const("LayoutVectorListLayoutDeltaNElements", poplar::layout::VectorList::DeltaNElements);
// poplar::layout::to_string(const poplar::layout::VectorList)__FunctionDecl
{ using namespace poplar::layout; 
mod.method("LayoutTo_String", [](const poplar::layout::VectorList a) {return poplar::layout::to_string(a);} ); }
// poplar::OptionFlags::iterator::iterator(const poplar::OptionFlags::iterator &)__CXXConstructor
{ using namespace poplar; 
JLOptionFlagsiterator.constructor<const poplar::OptionFlags::iterator &>();
}
// poplar::OptionFlags::OptionFlags(const poplar::OptionFlags &)__CXXConstructor
{ using namespace poplar; 
JLOptionFlags.constructor<const poplar::OptionFlags &>();
}
// poplar::OptionFlags::set(std::string, std::string)__CXXMethod
{ using namespace poplar; 
JLOptionFlags.method("OptionFlagsSet", [](poplar::OptionFlags& cl, std::string a, std::string b) {return cl.set(a, b);} ); 
}
// poplar::OptionFlags::at(std::string)__CXXMethod
{ using namespace poplar; 
JLOptionFlags.method("OptionFlagsAt", [](poplar::OptionFlags& cl, std::string a) {return cl.at(a);} ); 
}
// poplar::OptionFlags::clear()__CXXMethod
{ using namespace poplar; 
JLOptionFlags.method("OptionFlagsClear", [](poplar::OptionFlags& cl) {return cl.clear();} ); 
}
// poplar::OptionFlags::begin()__CXXMethod
{ using namespace poplar; 
JLOptionFlags.method("OptionFlagsBegin", [](poplar::OptionFlags& cl) {return cl.begin();} ); 
}
// poplar::OptionFlags::end()__CXXMethod
{ using namespace poplar; 
JLOptionFlags.method("OptionFlagsEnd", [](poplar::OptionFlags& cl) {return cl.end();} ); 
}
// poplar::getAsProfileValue(const poplar::OptionFlags &)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarGetAsProfileValue", [](const poplar::OptionFlags & a) {return poplar::getAsProfileValue(a);} ); }
// poplar::readJSON(std::string, poplar::OptionFlags &)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarReadJSON", [](std::string a, poplar::OptionFlags & b) {return poplar::readJSON(a, b);} ); }
// poplar::GlobalExchangeFlow::GlobalExchangeFlow(unsigned int, unsigned int)__CXXConstructor
{ using namespace poplar; 
JLGlobalExchangeFlow.constructor<unsigned int, unsigned int>();
}
// poplar::GlobalExchangeConstraint::GlobalExchangeConstraint(double, ArrayRef<poplar::GlobalExchangeFlow>)__CXXConstructor
{ using namespace poplar; 
JLGlobalExchangeConstraint.constructor<double, ArrayRef<poplar::GlobalExchangeFlow>>();
}
// poplar::IpuLinkConfiguration::Default__EnumConstantDecl
mod.set_const("PoplarIpuLinkConfigurationPoplarDefault", poplar::IpuLinkConfiguration::Default);
// poplar::IpuLinkConfiguration::SlidingWindow__EnumConstantDecl
mod.set_const("PoplarIpuLinkConfigurationPoplarSlidingWindow", poplar::IpuLinkConfiguration::SlidingWindow);
// poplar::IpuLinkConfiguration::BarleyTwist__EnumConstantDecl
mod.set_const("PoplarIpuLinkConfigurationPoplarBarleyTwist", poplar::IpuLinkConfiguration::BarleyTwist);
// poplar::IpuLinkConfiguration::None__EnumConstantDecl
mod.set_const("PoplarIpuLinkConfigurationPoplarNone", poplar::IpuLinkConfiguration::None);
// poplar::IpuLinkTopology::Mesh__EnumConstantDecl
mod.set_const("PoplarIpuLinkTopologyPoplarMesh", poplar::IpuLinkTopology::Mesh);
// poplar::IpuLinkTopology::Torus__EnumConstantDecl
mod.set_const("PoplarIpuLinkTopologyPoplarTorus", poplar::IpuLinkTopology::Torus);
// poplar::TargetType::IPU__EnumConstantDecl
mod.set_const("PoplarTargetTypePoplarIPU", poplar::TargetType::IPU);
// poplar::TargetType::IPU_MODEL__EnumConstantDecl
mod.set_const("PoplarTargetTypePoplarIPU_MODEL", poplar::TargetType::IPU_MODEL);
// poplar::TargetType::CPU__EnumConstantDecl
mod.set_const("PoplarTargetTypePoplarCPU", poplar::TargetType::CPU);
// poplar::toString(poplar::TargetType)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarToString", [](poplar::TargetType a) {return poplar::toString(a);} ); }
// poplar::Type::Type(const poplar::Type &)__CXXConstructor
{ using namespace poplar; 
JLType.constructor<const poplar::Type &>();
}
// poplar::Type::toString()__CXXMethod
{ using namespace poplar; 
JLType.method("TypeToString", [](poplar::Type& cl) {return cl.toString();} ); 
}
// poplar::Target::Target(const poplar::Target &)__CXXConstructor
{ using namespace poplar; 
JLTarget.constructor<const poplar::Target &>();
}
// poplar::Target::getTargetType()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetTargetType", [](poplar::Target& cl) {return cl.getTargetType();} ); 
}
// poplar::Target::getTargetArchString()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetTargetArchString", [](poplar::Target& cl) {return cl.getTargetArchString();} ); 
}
// poplar::Target::getNumIPUs()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetNumIPUs", [](poplar::Target& cl) {return cl.getNumIPUs();} ); 
}
// poplar::Target::getTilesPerIPU()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetTilesPerIPU", [](poplar::Target& cl) {return cl.getTilesPerIPU();} ); 
}
// poplar::Target::getNumWorkerContexts()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetNumWorkerContexts", [](poplar::Target& cl) {return cl.getNumWorkerContexts();} ); 
}
// poplar::Target::getBytesPerTile()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetBytesPerTile", [](poplar::Target& cl) {return cl.getBytesPerTile();} ); 
}
// poplar::Target::getExchangeBytesPerCycle()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetExchangeBytesPerCycle", [](poplar::Target& cl) {return cl.getExchangeBytesPerCycle();} ); 
}
// poplar::Target::getMemcpyBytesPerCycle()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetMemcpyBytesPerCycle", [](poplar::Target& cl) {return cl.getMemcpyBytesPerCycle();} ); 
}
// poplar::Target::getMinIPUSyncDelay()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetMinIPUSyncDelay", [](poplar::Target& cl) {return cl.getMinIPUSyncDelay();} ); 
}
// poplar::Target::getGlobalSyncCycles()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetGlobalSyncCycles", [](poplar::Target& cl) {return cl.getGlobalSyncCycles();} ); 
}
// poplar::Target::getMemoryElementOffsets()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetMemoryElementOffsets", [](poplar::Target& cl) {return cl.getMemoryElementOffsets();} ); 
}
// poplar::Target::getInterleavedMemoryElementIndex()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetInterleavedMemoryElementIndex", [](poplar::Target& cl) {return cl.getInterleavedMemoryElementIndex();} ); 
}
// poplar::Target::getGlobalExchangeConstraints()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetGlobalExchangeConstraints", [](poplar::Target& cl) {return cl.getGlobalExchangeConstraints();} ); 
}
// poplar::Target::getNumStrideBits()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetNumStrideBits", [](poplar::Target& cl) {return cl.getNumStrideBits();} ); 
}
// poplar::Target::getDataPathWidth()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetDataPathWidth", [](poplar::Target& cl) {return cl.getDataPathWidth();} ); 
}
// poplar::Target::getFp16ConvUnitMaxPipelineDepth()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp16ConvUnitMaxPipelineDepth", [](poplar::Target& cl) {return cl.getFp16ConvUnitMaxPipelineDepth();} ); 
}
// poplar::Target::getFp32ConvUnitMaxPipelineDepth()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp32ConvUnitMaxPipelineDepth", [](poplar::Target& cl) {return cl.getFp32ConvUnitMaxPipelineDepth();} ); 
}
// poplar::Target::getFp16ConvUnitInputLoadElemsPerCycle()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp16ConvUnitInputLoadElemsPerCycle", [](poplar::Target& cl) {return cl.getFp16ConvUnitInputLoadElemsPerCycle();} ); 
}
// poplar::Target::getFp32ConvUnitInputLoadElemsPerCycle()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp32ConvUnitInputLoadElemsPerCycle", [](poplar::Target& cl) {return cl.getFp32ConvUnitInputLoadElemsPerCycle();} ); 
}
// poplar::Target::getFp16InFp16OutConvUnitsPerTile()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp16InFp16OutConvUnitsPerTile", [](poplar::Target& cl) {return cl.getFp16InFp16OutConvUnitsPerTile();} ); 
}
// poplar::Target::getFp16InFp32OutConvUnitsPerTile()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp16InFp32OutConvUnitsPerTile", [](poplar::Target& cl) {return cl.getFp16InFp32OutConvUnitsPerTile();} ); 
}
// poplar::Target::getFp32InFp32OutConvUnitsPerTile()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFp32InFp32OutConvUnitsPerTile", [](poplar::Target& cl) {return cl.getFp32InFp32OutConvUnitsPerTile();} ); 
}
// poplar::Target::getConvUnitCoeffLoadBytesPerCycle()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetConvUnitCoeffLoadBytesPerCycle", [](poplar::Target& cl) {return cl.getConvUnitCoeffLoadBytesPerCycle();} ); 
}
// poplar::Target::getRptCountMax()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetRptCountMax", [](poplar::Target& cl) {return cl.getRptCountMax();} ); 
}
// poplar::Target::supportsExchangeBusSharing()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetSupportsExchangeBusSharing", [](poplar::Target& cl) {return cl.supportsExchangeBusSharing();} ); 
}
// poplar::Target::getTilesPerSharedExchangeBus()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetTilesPerSharedExchangeBus", [](poplar::Target& cl) {return cl.getTilesPerSharedExchangeBus();} ); 
}
// poplar::Target::getNumTiles()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetNumTiles", [](poplar::Target& cl) {return cl.getNumTiles();} ); 
}
// poplar::Target::getMemoryBytes()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetMemoryBytes", [](poplar::Target& cl) {return cl.getMemoryBytes();} ); 
}
// poplar::Target::getFloatVectorWidth()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFloatVectorWidth", [](poplar::Target& cl) {return cl.getFloatVectorWidth();} ); 
}
// poplar::Target::getHalfVectorWidth()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetHalfVectorWidth", [](poplar::Target& cl) {return cl.getHalfVectorWidth();} ); 
}
// poplar::Target::getVectorWidth(const poplar::Type &)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetVectorWidth", [](poplar::Target& cl, const poplar::Type & a) {return cl.getVectorWidth(a);} ); 
}
// poplar::Target::getWeightsPerConvUnit(bool)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetWeightsPerConvUnit", [](poplar::Target& cl, bool a) {return cl.getWeightsPerConvUnit(a);} ); 
}
// poplar::Target::getConvUnitInputLoadElemsPerCycle(bool)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetConvUnitInputLoadElemsPerCycle", [](poplar::Target& cl, bool a) {return cl.getConvUnitInputLoadElemsPerCycle(a);} ); 
}
// poplar::Target::getMaxIPUSyncDelay()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetMaxIPUSyncDelay", [](poplar::Target& cl) {return cl.getMaxIPUSyncDelay();} ); 
}
// poplar::Target::getTileClockFrequency()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetTileClockFrequency", [](poplar::Target& cl) {return cl.getTileClockFrequency();} ); 
}
// poplar::Target::getNumTilesPerXBContext()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetNumTilesPerXBContext", [](poplar::Target& cl) {return cl.getNumTilesPerXBContext();} ); 
}
// poplar::Target::getNumContextsPerXB()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetNumContextsPerXB", [](poplar::Target& cl) {return cl.getNumContextsPerXB();} ); 
}
// poplar::Target::getTypeSize(const poplar::Type &)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetTypeSize", [](poplar::Target& cl, const poplar::Type & a) {return cl.getTypeSize(a);} ); 
}
// poplar::Target::getAtomicStoreGranularity()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetAtomicStoreGranularity", [](poplar::Target& cl) {return cl.getAtomicStoreGranularity();} ); 
}
// poplar::Target::makeFpIctlValue(bool, bool, bool, bool, bool)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetMakeFpIctlValue", [](poplar::Target& cl, bool a, bool b, bool c, bool d, bool e) {return cl.makeFpIctlValue(a, b, c, d, e);} ); 
}
// poplar::Target::getFpIctlRegIndex()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetFpIctlRegIndex", [](poplar::Target& cl) {return cl.getFpIctlRegIndex();} ); 
}
// poplar::Target::getDbgDataRegIndex()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetDbgDataRegIndex", [](poplar::Target& cl) {return cl.getDbgDataRegIndex();} ); 
}
// poplar::Target::getIpuLinkConfiguration()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetIpuLinkConfiguration", [](poplar::Target& cl) {return cl.getIpuLinkConfiguration();} ); 
}
// poplar::Target::getIpuLinkTopology()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetIpuLinkTopology", [](poplar::Target& cl) {return cl.getIpuLinkTopology();} ); 
}
// poplar::Target::getIpuLinkDomainSize()__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetGetIpuLinkDomainSize", [](poplar::Target& cl) {return cl.getIpuLinkDomainSize();} ); 
}
// poplar::Target::createVirtualTarget(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetCreateVirtualTarget", [](poplar::Target& cl, unsigned int a, unsigned int b) {return cl.createVirtualTarget(a, b);} ); 
}
// poplar::Target::createCPUTarget(bool)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetCreateCPUTarget", [](poplar::Target& cl) {return cl.createCPUTarget();} ); 
JLTarget.method("TargetCreateCPUTarget", [](poplar::Target& cl, bool a) {return cl.createCPUTarget(a);} ); 
}
// poplar::Target::createIPUTarget(unsigned int, std::string, const poplar::OptionFlags &)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetCreateIPUTarget", [](poplar::Target& cl, unsigned int a, std::string b) {return cl.createIPUTarget(a, b);} ); 
JLTarget.method("TargetCreateIPUTarget", [](poplar::Target& cl, unsigned int a, std::string b, const poplar::OptionFlags & c) {return cl.createIPUTarget(a, b, c);} ); 
}
// poplar::Target::createIPUTarget(unsigned int, unsigned int, std::string, const poplar::OptionFlags &)__CXXMethod
{ using namespace poplar; 
JLTarget.method("TargetCreateIPUTarget", [](poplar::Target& cl, unsigned int a, unsigned int b, std::string c) {return cl.createIPUTarget(a, b, c);} ); 
JLTarget.method("TargetCreateIPUTarget", [](poplar::Target& cl, unsigned int a, unsigned int b, std::string c, const poplar::OptionFlags & d) {return cl.createIPUTarget(a, b, c, d);} ); 
}
// poplar::copyDeviceHalfToFloat(const poplar::Target &, const void *, float *, std::size_t)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarCopyDeviceHalfToFloat", [](const poplar::Target & a, const void * b, float * c, std::size_t d) {return poplar::copyDeviceHalfToFloat(a, b, c, d);} ); }
// poplar::copyFloatToDeviceHalf(const poplar::Target &, const float *, void *, std::size_t)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarCopyFloatToDeviceHalf", [](const poplar::Target & a, const float * b, void * c, std::size_t d) {return poplar::copyFloatToDeviceHalf(a, b, c, d);} ); }
// poplar::copyDeviceHalfToDouble(const poplar::Target &, const void *, double *, std::size_t)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarCopyDeviceHalfToDouble", [](const poplar::Target & a, const void * b, double * c, std::size_t d) {return poplar::copyDeviceHalfToDouble(a, b, c, d);} ); }
// poplar::copyDoubleToDeviceHalf(const poplar::Target &, const double *, void *, std::size_t)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarCopyDoubleToDeviceHalf", [](const poplar::Target & a, const double * b, void * c, std::size_t d) {return poplar::copyDoubleToDeviceHalf(a, b, c, d);} ); }
// poplar::Device::getId()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceGetId", [](poplar::Device& cl) {return cl.getId();} ); 
}
// poplar::Device::getTarget()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceGetTarget", [](poplar::Device& cl) {return cl.getTarget();} ); 
}
// poplar::Device::attach()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceAttach", [](poplar::Device& cl) {return cl.attach();} ); 
}
// poplar::Device::detach()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceDetach", [](poplar::Device& cl) {return cl.detach();} ); 
}
// poplar::Device::temporarilyDetach()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceTemporarilyDetach", [](poplar::Device& cl) {return cl.temporarilyDetach();} ); 
}
// poplar::Device::getDriverVersion(unsigned int &, unsigned int &, unsigned int &)__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceGetDriverVersion", [](poplar::Device& cl, unsigned int & a, unsigned int & b, unsigned int & c) {return cl.getDriverVersion(a, b, c);} ); 
}
// poplar::Device::supportsRemoteBuffers()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceSupportsRemoteBuffers", [](poplar::Device& cl) {return cl.supportsRemoteBuffers();} ); 
}
// poplar::Device::supportsGraphStreaming()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceSupportsGraphStreaming", [](poplar::Device& cl) {return cl.supportsGraphStreaming();} ); 
}
// poplar::Device::getAttributes()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceGetAttributes", [](poplar::Device& cl) {return cl.getAttributes();} ); 
}
// poplar::Device::getDriverIDs()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceGetDriverIDs", [](poplar::Device& cl) {return cl.getDriverIDs();} ); 
}
// poplar::Device::reset()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceReset", [](poplar::Device& cl) {return cl.reset();} ); 
}
// poplar::Device::createVirtualDevice(unsigned int)__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceCreateVirtualDevice", [](poplar::Device& cl, unsigned int a) {return cl.createVirtualDevice(a);} ); 
}
// poplar::Device::createCPUDevice()__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceCreateCPUDevice", [](poplar::Device& cl) {return cl.createCPUDevice();} ); 
}
// poplar::Device::createSimulatorDevice(const poplar::Target &, const poplar::OptionFlags &)__CXXMethod
{ using namespace poplar; 
JLDevice.method("DeviceCreateSimulatorDevice", [](poplar::Device& cl, const poplar::Target & a) {return cl.createSimulatorDevice(a);} ); 
JLDevice.method("DeviceCreateSimulatorDevice", [](poplar::Device& cl, const poplar::Target & a, const poplar::OptionFlags & b) {return cl.createSimulatorDevice(a, b);} ); 
}
// poplar::DeviceManager::DeviceManager(const poplar::DeviceManager &)__CXXConstructor
{ using namespace poplar; 
JLDeviceManager.constructor<const poplar::DeviceManager &>();
}
// poplar::DeviceManager::getNumDevices()__CXXMethod
{ using namespace poplar; 
JLDeviceManager.method("DeviceManagerGetNumDevices", [](poplar::DeviceManager& cl) {return cl.getNumDevices();} ); 
}
// poplar::DeviceManager::getDevice(unsigned int, const poplar::OptionFlags &)__CXXMethod
{ using namespace poplar; 
JLDeviceManager.method("DeviceManagerGetDevice", [](poplar::DeviceManager& cl, unsigned int a) {return cl.getDevice(a);} ); 
JLDeviceManager.method("DeviceManagerGetDevice", [](poplar::DeviceManager& cl, unsigned int a, const poplar::OptionFlags & b) {return cl.getDevice(a, b);} ); 
}
// poplar::DeviceManager::getChildDeviceIds(unsigned int)__CXXMethod
{ using namespace poplar; 
JLDeviceManager.method("DeviceManagerGetChildDeviceIds", [](poplar::DeviceManager& cl, unsigned int a) {return cl.getChildDeviceIds(a);} ); 
}
// poplar::DeviceManager::createDeviceManager()__CXXMethod
{ using namespace poplar; 
JLDeviceManager.method("DeviceManagerCreateDeviceManager", [](poplar::DeviceManager& cl) {return cl.createDeviceManager();} ); 
}
// poplar::CodeletFileType::PreprocessedAsmSource__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarPreprocessedAsmSource", poplar::CodeletFileType::PreprocessedAsmSource);
// poplar::CodeletFileType::AsmSource__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarAsmSource", poplar::CodeletFileType::AsmSource);
// poplar::CodeletFileType::CSource__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarCSource", poplar::CodeletFileType::CSource);
// poplar::CodeletFileType::CppSource__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarCppSource", poplar::CodeletFileType::CppSource);
// poplar::CodeletFileType::IrSource__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarIrSource", poplar::CodeletFileType::IrSource);
// poplar::CodeletFileType::Object__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarObject", poplar::CodeletFileType::Object);
// poplar::CodeletFileType::Auto__EnumConstantDecl
mod.set_const("PoplarCodeletFileTypePoplarAuto", poplar::CodeletFileType::Auto);
// poplar::getCodeletFileType(const char *)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarGetCodeletFileType", [](const char * a) {return poplar::getCodeletFileType(a);} ); }
// poplar::DataStreamType::HostToDeviceFIFO__EnumConstantDecl
mod.set_const("PoplarDataStreamTypePoplarHostToDeviceFIFO", poplar::DataStreamType::HostToDeviceFIFO);
// poplar::DataStreamType::DeviceToHostFIFO__EnumConstantDecl
mod.set_const("PoplarDataStreamTypePoplarDeviceToHostFIFO", poplar::DataStreamType::DeviceToHostFIFO);
// poplar::DataStreamType::HostToDeviceBuffer__EnumConstantDecl
mod.set_const("PoplarDataStreamTypePoplarHostToDeviceBuffer", poplar::DataStreamType::HostToDeviceBuffer);
// poplar::DataStreamType::DeviceToHostBuffer__EnumConstantDecl
mod.set_const("PoplarDataStreamTypePoplarDeviceToHostBuffer", poplar::DataStreamType::DeviceToHostBuffer);
// poplar::isDeviceToHost(poplar::DataStreamType)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarIsDeviceToHost", [](poplar::DataStreamType a) {return poplar::isDeviceToHost(a);} ); }
// poplar::isHostToDevice(poplar::DataStreamType)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarIsHostToDevice", [](poplar::DataStreamType a) {return poplar::isHostToDevice(a);} ); }
// poplar::isRemoteBuffer(poplar::DataStreamType)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarIsRemoteBuffer", [](poplar::DataStreamType a) {return poplar::isRemoteBuffer(a);} ); }
// poplar::ReplicatedStreamMode::REPLICATE__EnumConstantDecl
mod.set_const("PoplarReplicatedStreamModePoplarREPLICATE", poplar::ReplicatedStreamMode::REPLICATE);
// poplar::ReplicatedStreamMode::BROADCAST__EnumConstantDecl
mod.set_const("PoplarReplicatedStreamModePoplarBROADCAST", poplar::ReplicatedStreamMode::BROADCAST);
// poplar::DataStream::DataStream(const poplar::DataStream &)__CXXConstructor
{ using namespace poplar; 
JLDataStream.constructor<const poplar::DataStream &>();
}
// poplar::DataStream::handle()__CXXMethod
{ using namespace poplar; 
JLDataStream.method("DataStreamHandle", [](poplar::DataStream& cl) {return cl.handle();} ); 
}
// poplar::DataStream::numElements()__CXXMethod
{ using namespace poplar; 
JLDataStream.method("DataStreamNumElements", [](poplar::DataStream& cl) {return cl.numElements();} ); 
}
// poplar::DataStream::replicationFactor()__CXXMethod
{ using namespace poplar; 
JLDataStream.method("DataStreamReplicationFactor", [](poplar::DataStream& cl) {return cl.replicationFactor();} ); 
}
// poplar::DataStream::replicatedMode()__CXXMethod
{ using namespace poplar; 
JLDataStream.method("DataStreamReplicatedMode", [](poplar::DataStream& cl) {return cl.replicatedMode();} ); 
}
// poplar::DataStream::type()__CXXMethod
{ using namespace poplar; 
JLDataStream.method("DataStreamType", [](poplar::DataStream& cl) {return cl.type();} ); 
}
// poplar::DataStream::elementType()__CXXMethod
{ using namespace poplar; 
JLDataStream.method("DataStreamElementType", [](poplar::DataStream& cl) {return cl.elementType();} ); 
}
// poplar::RemoteBuffer::RemoteBuffer(const poplar::RemoteBuffer &)__CXXConstructor
{ using namespace poplar; 
JLRemoteBuffer.constructor<const poplar::RemoteBuffer &>();
}
// poplar::RemoteBuffer::handle()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferHandle", [](poplar::RemoteBuffer& cl) {return cl.handle();} ); 
}
// poplar::RemoteBuffer::getIpuToHostStream()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferGetIpuToHostStream", [](poplar::RemoteBuffer& cl) {return cl.getIpuToHostStream();} ); 
}
// poplar::RemoteBuffer::getHostToIpuStream()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferGetHostToIpuStream", [](poplar::RemoteBuffer& cl) {return cl.getHostToIpuStream();} ); 
}
// poplar::RemoteBuffer::numElements()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferNumElements", [](poplar::RemoteBuffer& cl) {return cl.numElements();} ); 
}
// poplar::RemoteBuffer::getRepeats()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferGetRepeats", [](poplar::RemoteBuffer& cl) {return cl.getRepeats();} ); 
}
// poplar::RemoteBuffer::elementType()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferElementType", [](poplar::RemoteBuffer& cl) {return cl.elementType();} ); 
}
// poplar::RemoteBuffer::isRearrangeOnHost()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferIsRearrangeOnHost", [](poplar::RemoteBuffer& cl) {return cl.isRearrangeOnHost();} ); 
}
// poplar::RemoteBuffer::isOptimisedForMemory()__CXXMethod
{ using namespace poplar; 
JLRemoteBuffer.method("RemoteBufferIsOptimisedForMemory", [](poplar::RemoteBuffer& cl) {return cl.isOptimisedForMemory();} ); 
}
// poplar::VertexRef::getId()__CXXMethod
{ using namespace poplar; 
JLVertexRef.method("VertexRefGetId", [](poplar::VertexRef& cl) {return cl.getId();} ); 
}
// poplar::FieldRef::isIndexed()__CXXMethod
{ using namespace poplar; 
JLFieldRef.method("FieldRefIsIndexed", [](poplar::FieldRef& cl) {return cl.isIndexed();} ); 
}
// poplar::FieldRef::getIndex()__CXXMethod
{ using namespace poplar; 
JLFieldRef.method("FieldRefGetIndex", [](poplar::FieldRef& cl) {return cl.getIndex();} ); 
}
// poplar::ComputeSet::ComputeSet(unsigned int)__CXXConstructor
{ using namespace poplar; 
JLComputeSet.constructor<unsigned int>();
}
// poplar::ComputeSet::getId()__CXXMethod
{ using namespace poplar; 
JLComputeSet.method("ComputeSetGetId", [](poplar::ComputeSet& cl) {return cl.getId();} ); 
}
// poplar::Function::Function(unsigned int)__CXXConstructor
{ using namespace poplar; 
JLFunction.constructor<unsigned int>();
}
// poplar::Function::getId()__CXXMethod
{ using namespace poplar; 
JLFunction.method("FunctionGetId", [](poplar::Function& cl) {return cl.getId();} ); 
}
// poplar::ProfileValue::Type::BOOL___EnumConstantDecl
mod.set_const("ProfileValueTypeProfileValueBOOL_", poplar::ProfileValue::Type::BOOL_);
// poplar::ProfileValue::Type::STRING__EnumConstantDecl
mod.set_const("ProfileValueTypeProfileValueSTRING", poplar::ProfileValue::Type::STRING);
// poplar::ProfileValue::Type::NUMBER__EnumConstantDecl
mod.set_const("ProfileValueTypeProfileValueNUMBER", poplar::ProfileValue::Type::NUMBER);
// poplar::ProfileValue::Type::VECTOR__EnumConstantDecl
mod.set_const("ProfileValueTypeProfileValueVECTOR", poplar::ProfileValue::Type::VECTOR);
// poplar::ProfileValue::Type::MAP__EnumConstantDecl
mod.set_const("ProfileValueTypeProfileValueMAP", poplar::ProfileValue::Type::MAP);
// poplar::ProfileValue::type()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueType", [](poplar::ProfileValue& cl) {return cl.type();} ); 
}
// poplar::ProfileValue::asString()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsString", [](poplar::ProfileValue& cl) {return cl.asString();} ); 
}
// poplar::ProfileValue::asBool()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsBool", [](poplar::ProfileValue& cl) {return cl.asBool();} ); 
}
// poplar::ProfileValue::asInt()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsInt", [](poplar::ProfileValue& cl) {return cl.asInt();} ); 
}
// poplar::ProfileValue::asUint()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsUint", [](poplar::ProfileValue& cl) {return cl.asUint();} ); 
}
// poplar::ProfileValue::asDouble()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsDouble", [](poplar::ProfileValue& cl) {return cl.asDouble();} ); 
}
// poplar::ProfileValue::getOrNull(std::string)__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueGetOrNull", [](poplar::ProfileValue& cl, std::string a) {return cl.getOrNull(a);} ); 
}
// poplar::ProfileValue::asMap()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsMap", [](poplar::ProfileValue& cl) {return cl.asMap();} ); 
}
// poplar::ProfileValue::asVector()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueAsVector", [](poplar::ProfileValue& cl) {return cl.asVector();} ); 
}
// poplar::ProfileValue::toUintVector()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueToUintVector", [](poplar::ProfileValue& cl) {return cl.toUintVector();} ); 
}
// poplar::ProfileValue::size()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueSize", [](poplar::ProfileValue& cl) {return cl.size();} ); 
}
// poplar::ProfileValue::sumDouble()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueSumDouble", [](poplar::ProfileValue& cl) {return cl.sumDouble();} ); 
}
// poplar::ProfileValue::sumInt()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueSumInt", [](poplar::ProfileValue& cl) {return cl.sumInt();} ); 
}
// poplar::ProfileValue::sumUint()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueSumUint", [](poplar::ProfileValue& cl) {return cl.sumUint();} ); 
}
// poplar::ProfileValue::sum2DInt()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueSum2DInt", [](poplar::ProfileValue& cl) {return cl.sum2DInt();} ); 
}
// poplar::ProfileValue::sum2DUint()__CXXMethod
{ using namespace poplar; 
JLProfileValue.method("ProfileValueSum2DUint", [](poplar::ProfileValue& cl) {return cl.sum2DUint();} ); 
}
// poplar::ProfileValue::ProfileValue(poplar::ProfileValue::String)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<poplar::ProfileValue::String>();
}
// poplar::ProfileValue::ProfileValue(poplar::ProfileValue::Vector)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<poplar::ProfileValue::Vector>();
}
// poplar::ProfileValue::ProfileValue(poplar::ProfileValue::Map)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<poplar::ProfileValue::Map>();
}
// poplar::ProfileValue::ProfileValue(poplar::ProfileValue::Number)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<poplar::ProfileValue::Number>();
}
// poplar::ProfileValue::ProfileValue(poplar::ProfileValue::Boolean)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<poplar::ProfileValue::Boolean>();
}
// poplar::ProfileValue::ProfileValue(const char *)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<const char *>();
}
// poplar::ProfileValue::ProfileValue(const poplar::ProfileValue &)__CXXConstructor
{ using namespace poplar; 
JLProfileValue.constructor<const poplar::ProfileValue &>();
}
// poplar::poplar_error::poplar_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLPoplar_error.constructor<const std::string &>();
}
// poplar::poplar_error::poplar_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLPoplar_error.constructor<const char *>();
}
// poplar::graph_program_compilation_error::graph_program_compilation_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_program_compilation_error.constructor<const std::string &>();
}
// poplar::graph_program_compilation_error::graph_program_compilation_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLGraph_program_compilation_error.constructor<const char *>();
}
// poplar::graph_object_creation_error::graph_object_creation_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_object_creation_error.constructor<const std::string &>();
}
// poplar::graph_object_creation_error::graph_object_creation_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLGraph_object_creation_error.constructor<const char *>();
}
// poplar::graph_object_load_error::graph_object_load_error(const std::string &, const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_object_load_error.constructor<const std::string &, const std::string &>();
}
// poplar::no_environment::no_environment(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLNo_environment.constructor<const std::string &>();
}
// poplar::no_environment::no_environment(const char *)__CXXConstructor
{ using namespace poplar; 
JLNo_environment.constructor<const char *>();
}
// poplar::unknown_vertex_type::unknown_vertex_type(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLUnknown_vertex_type.constructor<const std::string &>();
}
// poplar::unknown_field::unknown_field(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLUnknown_field.constructor<const std::string &>();
}
// poplar::unknown_field::unknown_field(const char *)__CXXConstructor
{ using namespace poplar; 
JLUnknown_field.constructor<const char *>();
}
// poplar::unknown_field::unknown_field(const std::string &, const std::string &)__CXXConstructor
{ using namespace poplar; 
JLUnknown_field.constructor<const std::string &, const std::string &>();
}
// poplar::control_program_error::control_program_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLControl_program_error.constructor<const std::string &>();
}
// poplar::type_error::type_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLType_error.constructor<const std::string &>();
}
// poplar::type_error::type_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLType_error.constructor<const char *>();
}
// poplar::index_error::index_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLIndex_error.constructor<const std::string &>();
}
// poplar::index_error::index_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLIndex_error.constructor<const char *>();
}
// poplar::index_error::index_error(const std::string &, std::size_t)__CXXConstructor
{ using namespace poplar; 
JLIndex_error.constructor<const std::string &, std::size_t>();
}
// poplar::no_size_specified::no_size_specified(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLNo_size_specified.constructor<const std::string &>();
}
// poplar::no_size_specified::no_size_specified(const char *)__CXXConstructor
{ using namespace poplar; 
JLNo_size_specified.constructor<const char *>();
}
// poplar::no_size_specified::no_size_specified(const std::string &, const std::string &)__CXXConstructor
{ using namespace poplar; 
JLNo_size_specified.constructor<const std::string &, const std::string &>();
}
// poplar::graph_connection_error::graph_connection_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_connection_error.constructor<const std::string &>();
}
// poplar::graph_connection_error::graph_connection_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLGraph_connection_error.constructor<const char *>();
}
// poplar::graph_cycle_error::graph_cycle_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_cycle_error.constructor<const std::string &>();
}
// poplar::graph_cycle_error::graph_cycle_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLGraph_cycle_error.constructor<const char *>();
}
// poplar::graph_replication_error::graph_replication_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_replication_error.constructor<const std::string &>();
}
// poplar::graph_replication_error::graph_replication_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLGraph_replication_error.constructor<const char *>();
}
// poplar::missing_cycle_estimate::missing_cycle_estimate(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLMissing_cycle_estimate.constructor<const std::string &>();
}
// poplar::invalid_tile_mapping::invalid_tile_mapping(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLInvalid_tile_mapping.constructor<const std::string &>();
}
// poplar::invalid_tile_mapping::invalid_tile_mapping(const char *)__CXXConstructor
{ using namespace poplar; 
JLInvalid_tile_mapping.constructor<const char *>();
}
// poplar::tensor_creation_error::tensor_creation_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLTensor_creation_error.constructor<const std::string &>();
}
// poplar::tensor_creation_error::tensor_creation_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLTensor_creation_error.constructor<const char *>();
}
// poplar::tensor_io_state_error::tensor_io_state_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLTensor_io_state_error.constructor<const std::string &>();
}
// poplar::tensor_io_state_error::tensor_io_state_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLTensor_io_state_error.constructor<const char *>();
}
// poplar::stream_connection_error::stream_connection_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLStream_connection_error.constructor<const std::string &>();
}
// poplar::stream_connection_error::stream_connection_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLStream_connection_error.constructor<const char *>();
}
// poplar::overflow_error::overflow_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLOverflow_error.constructor<const std::string &>();
}
// poplar::overflow_error::overflow_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLOverflow_error.constructor<const char *>();
}
// poplar::memory_elem_constraints_error::memory_elem_constraints_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLMemory_elem_constraints_error.constructor<const std::string &>();
}
// poplar::memory_elem_constraints_error::memory_elem_constraints_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLMemory_elem_constraints_error.constructor<const char *>();
}
// poplar::graph_memory_allocation_error::graph_memory_allocation_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLGraph_memory_allocation_error.constructor<const std::string &>();
}
// poplar::graph_memory_allocation_error::graph_memory_allocation_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLGraph_memory_allocation_error.constructor<const char *>();
}
// poplar::stream_memory_allocation_error::stream_memory_allocation_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLStream_memory_allocation_error.constructor<const std::string &>();
}
// poplar::stream_memory_allocation_error::stream_memory_allocation_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLStream_memory_allocation_error.constructor<const char *>();
}
// poplar::invalid_machine_model::invalid_machine_model(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLInvalid_machine_model.constructor<const std::string &>();
}
// poplar::invalid_machine_model::invalid_machine_model(const char *)__CXXConstructor
{ using namespace poplar; 
JLInvalid_machine_model.constructor<const char *>();
}
// poplar::invalid_option::invalid_option(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLInvalid_option.constructor<const std::string &>();
}
// poplar::invalid_option::invalid_option(const char *)__CXXConstructor
{ using namespace poplar; 
JLInvalid_option.constructor<const char *>();
}
// poplar::link_error::link_error(const std::string &, const std::string &)__CXXConstructor
{ using namespace poplar; 
JLLink_error.constructor<const std::string &>();
JLLink_error.constructor<const std::string &, const std::string &>();
}
// poplar::link_error::link_error(const char *, const char *)__CXXConstructor
{ using namespace poplar; 
JLLink_error.constructor<const char *>();
JLLink_error.constructor<const char *, const char *>();
}
// poplar::runtime_error::runtime_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLRuntime_error.constructor<const std::string &>();
}
// poplar::runtime_error::runtime_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLRuntime_error.constructor<const char *>();
}
// poplar::symbol_error::symbol_error(const std::string &, const unsigned int)__CXXConstructor
{ using namespace poplar; 
JLSymbol_error.constructor<const std::string &, const unsigned int>();
}
// poplar::file_load_error::file_load_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLFile_load_error.constructor<const std::string &>();
}
// poplar::parse_error::parse_error(const std::string &)__CXXConstructor
{ using namespace poplar; 
JLParse_error.constructor<const std::string &>();
}
// poplar::parse_error::parse_error(const char *)__CXXConstructor
{ using namespace poplar; 
JLParse_error.constructor<const char *>();
}
// poplar::SerializationFormat::Binary__EnumConstantDecl
mod.set_const("PoplarSerializationFormatPoplarBinary", poplar::SerializationFormat::Binary);
// poplar::SerializationFormat::JSON__EnumConstantDecl
mod.set_const("PoplarSerializationFormatPoplarJSON", poplar::SerializationFormat::JSON);
// poplar::SourceLocation::SourceLocation(const char *, const char *, unsigned int)__CXXConstructor
{ using namespace poplar; 
JLSourceLocation.constructor<const char *, const char *, unsigned int>();
}
// poplar::SourceLocation::getFunctionName()__CXXMethod
{ using namespace poplar; 
JLSourceLocation.method("SourceLocationGetFunctionName", [](poplar::SourceLocation& cl) {return cl.getFunctionName();} ); 
}
// poplar::SourceLocation::getFileName()__CXXMethod
{ using namespace poplar; 
JLSourceLocation.method("SourceLocationGetFileName", [](poplar::SourceLocation& cl) {return cl.getFileName();} ); 
}
// poplar::SourceLocation::getLineNumber()__CXXMethod
{ using namespace poplar; 
JLSourceLocation.method("SourceLocationGetLineNumber", [](poplar::SourceLocation& cl) {return cl.getLineNumber();} ); 
}
// poplar::SourceLocation::isValid()__CXXMethod
{ using namespace poplar; 
JLSourceLocation.method("SourceLocationIsValid", [](poplar::SourceLocation& cl) {return cl.isValid();} ); 
}
// poplar::SourceLocation::Current()__CXXMethod
{ using namespace poplar; 
JLSourceLocation.method("SourceLocationCurrent", [](poplar::SourceLocation& cl) {return cl.Current();} ); 
}
// poplar::DebugSerializationFormat::JSON__EnumConstantDecl
mod.set_const("PoplarDebugSerializationFormatPoplarJSON", poplar::DebugSerializationFormat::JSON);
// poplar::DebugSerializationFormat::CBOR__EnumConstantDecl
mod.set_const("PoplarDebugSerializationFormatPoplarCBOR", poplar::DebugSerializationFormat::CBOR);
// poplar::DebugInfo::DebugInfo(const poplar::DebugContext &, std::string)__CXXConstructor
{ using namespace poplar; 
JLDebugInfo.constructor<std::string, std::string>();
}
// poplar::DebugInfo::getId()__CXXMethod
{ using namespace poplar; 
JLDebugInfo.method("DebugInfoGetId", [](poplar::DebugInfo& cl) {return cl.getId();} ); 
}
// poplar::DebugInfo::initializeStreamer(const std::string &, const poplar::DebugSerializationFormat &)__CXXMethod
{ using namespace poplar; 
JLDebugInfo.method("DebugInfoInitializeStreamer", [](poplar::DebugInfo& cl, const std::string & a) {return cl.initializeStreamer(a);} ); 
JLDebugInfo.method("DebugInfoInitializeStreamer", [](poplar::DebugInfo& cl, const std::string & a, const poplar::DebugSerializationFormat & b) {return cl.initializeStreamer(a, b);} ); 
}
// poplar::DebugContext::DebugContext(poplar::SourceLocation)__CXXConstructor
{ using namespace poplar; 
JLDebugContext.constructor<poplar::SourceLocation>();
}
// poplar::DebugContext::DebugContext(const char *, poplar::SourceLocation)__CXXConstructor
{ using namespace poplar; 
JLDebugContext.constructor<const char *>();
JLDebugContext.constructor<const char *, poplar::SourceLocation>();
}
// poplar::DebugContext::DebugContext(std::string, poplar::SourceLocation)__CXXConstructor
{ using namespace poplar; 
JLDebugContext.constructor<std::string>();
JLDebugContext.constructor<std::string, poplar::SourceLocation>();
}
// poplar::DebugContext::DebugContext(const poplar::DebugInfo &, std::string, poplar::SourceLocation)__CXXConstructor
{ using namespace poplar; 
JLDebugContext.constructor<const poplar::DebugInfo &>();
JLDebugContext.constructor<const poplar::DebugInfo &, std::string>();
JLDebugContext.constructor<const poplar::DebugInfo &, std::string, poplar::SourceLocation>();
}
// poplar::DebugContext::getPathName()__CXXMethod
{ using namespace poplar; 
JLDebugContext.method("DebugContextGetPathName", [](poplar::DebugContext& cl) {return cl.getPathName();} ); 
}
// poplar::SyncType::INTERNAL__EnumConstantDecl
mod.set_const("PoplarSyncTypePoplarINTERNAL", poplar::SyncType::INTERNAL);
// poplar::SyncType::EXTERNAL__EnumConstantDecl
mod.set_const("PoplarSyncTypePoplarEXTERNAL", poplar::SyncType::EXTERNAL);
// poplar::TypeTraits::isSimpleType()__CXXMethod
{ using namespace poplar; 
JLTypeTraits.method("TypeTraitsIsSimpleType", [](poplar::TypeTraits& cl) {return cl.isSimpleType();} ); 
}
// poplar::Tensor::Tensor(const poplar::Tensor &)__CXXConstructor
{ using namespace poplar; 
JLTensor.constructor<const poplar::Tensor &>();
}
// poplar::Tensor::elementType()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorElementType", [](poplar::Tensor& cl) {return cl.elementType();} ); 
}
// poplar::Tensor::slice(std::size_t, std::size_t, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSlice", [](poplar::Tensor& cl, std::size_t a, std::size_t b, unsigned int c) {return cl.slice(a, b, c);} ); 
}
// poplar::Tensor::slice(std::size_t, std::size_t)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSlice", [](poplar::Tensor& cl, std::size_t a, std::size_t b) {return cl.slice(a, b);} ); 
}
// poplar::Tensor::slice(const poplar::Interval &, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSlice", [](poplar::Tensor& cl, const poplar::Interval & a) {return cl.slice(a);} ); 
JLTensor.method("TensorSlice", [](poplar::Tensor& cl, const poplar::Interval & a, unsigned int b) {return cl.slice(a, b);} ); 
}
// poplar::Tensor::slice(ArrayRef<std::size_t>, ArrayRef<std::size_t>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSlice", [](poplar::Tensor& cl, jlcxx::ArrayRef<std::size_t> a, jlcxx::ArrayRef<std::size_t> b) {return cl.slice(jlcxxToPoplar(a), jlcxxToPoplar(b));} ); 
}
// poplar::Tensor::slices(ArrayRef<poplar::Interval>, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSlices", [](poplar::Tensor& cl, ArrayRef<poplar::Interval> a) {return cl.slices(a);} ); 
JLTensor.method("TensorSlices", [](poplar::Tensor& cl, ArrayRef<poplar::Interval> a, unsigned int b) {return cl.slices(a, b);} ); 
}
// poplar::Tensor::slices(const std::vector<std::vector<Interval> > &, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSlices", [](poplar::Tensor& cl, const std::vector<std::vector<Interval> > & a) {return cl.slices(a);} ); 
JLTensor.method("TensorSlices", [](poplar::Tensor& cl, const std::vector<std::vector<Interval> > & a, unsigned int b) {return cl.slices(a, b);} ); 
}
// poplar::Tensor::index(ArrayRef<std::size_t>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorIndex", [](poplar::Tensor& cl, jlcxx::ArrayRef<std::size_t> a) {return cl.index(jlcxxToPoplar(a));} ); 
}
// poplar::Tensor::flatten()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorFlatten", [](poplar::Tensor& cl) {return cl.flatten();} ); 
}
// poplar::Tensor::flatten(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorFlatten", [](poplar::Tensor& cl, unsigned int a, unsigned int b) {return cl.flatten(a, b);} ); 
}
// poplar::Tensor::reshape(ArrayRef<std::size_t>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorReshape", [](poplar::Tensor& cl, jlcxx::ArrayRef<std::size_t> a) {return cl.reshape(jlcxxToPoplar(a));} ); 
}
// poplar::Tensor::dimShuffle(ArrayRef<unsigned int>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorDimShuffle", [](poplar::Tensor& cl, jlcxx::ArrayRef<unsigned int> a) {return cl.dimShuffle(jlcxxToPoplar(a));} ); 
}
// poplar::Tensor::dimShufflePartial(ArrayRef<unsigned int>, ArrayRef<unsigned int>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorDimShufflePartial", [](poplar::Tensor& cl, jlcxx::ArrayRef<unsigned int> a, jlcxx::ArrayRef<unsigned int> b) {return cl.dimShufflePartial(jlcxxToPoplar(a), jlcxxToPoplar(b));} ); 
}
// poplar::Tensor::dimRoll(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorDimRoll", [](poplar::Tensor& cl, unsigned int a) {return cl.dimRoll(a);} ); 
JLTensor.method("TensorDimRoll", [](poplar::Tensor& cl, unsigned int a, unsigned int b) {return cl.dimRoll(a, b);} ); 
}
// poplar::Tensor::reshapePartial(unsigned int, unsigned int, ArrayRef<std::size_t>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorReshapePartial", [](poplar::Tensor& cl, unsigned int a, unsigned int b, jlcxx::ArrayRef<std::size_t> c) {return cl.reshapePartial(a, b, jlcxxToPoplar(c));} ); 
}
// poplar::Tensor::expand(ArrayRef<std::size_t>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorExpand", [](poplar::Tensor& cl, jlcxx::ArrayRef<std::size_t> a) {return cl.expand(jlcxxToPoplar(a));} ); 
}
// poplar::Tensor::squeeze(ArrayRef<std::size_t>)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSqueeze", [](poplar::Tensor& cl, jlcxx::ArrayRef<std::size_t> a) {return cl.squeeze(jlcxxToPoplar(a));} ); 
}
// poplar::Tensor::transpose()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorTranspose", [](poplar::Tensor& cl) {return cl.transpose();} ); 
}
// poplar::Tensor::subSample(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorSubSample", [](poplar::Tensor& cl, unsigned int a, unsigned int b) {return cl.subSample(a, b);} ); 
}
// poplar::Tensor::broadcast(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorBroadcast", [](poplar::Tensor& cl, unsigned int a, unsigned int b) {return cl.broadcast(a, b);} ); 
}
// poplar::Tensor::reinterpret(const poplar::Type &)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorReinterpret", [](poplar::Tensor& cl, const poplar::Type & a) {return cl.reinterpret(a);} ); 
}
// poplar::Tensor::reverse(unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorReverse", [](poplar::Tensor& cl, unsigned int a) {return cl.reverse(a);} ); 
}
// poplar::Tensor::numElements()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorNumElements", [](poplar::Tensor& cl) {return cl.numElements();} ); 
}
// poplar::Tensor::dim(unsigned int)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorDim", [](poplar::Tensor& cl, unsigned int a) {return cl.dim(a);} ); 
}
// poplar::Tensor::shape()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorShape", [](poplar::Tensor& cl) {return cl.shape();} ); 
}
// poplar::Tensor::rank()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorRank", [](poplar::Tensor& cl) {return cl.rank();} ); 
}
// poplar::Tensor::isContiguous()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorIsContiguous", [](poplar::Tensor& cl) {return cl.isContiguous();} ); 
}
// poplar::Tensor::containsAliases()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorContainsAliases", [](poplar::Tensor& cl) {return cl.containsAliases();} ); 
}
// poplar::Tensor::containsConstant()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorContainsConstant", [](poplar::Tensor& cl) {return cl.containsConstant();} ); 
}
// poplar::Tensor::isParallelWriteable()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorIsParallelWriteable", [](poplar::Tensor& cl) {return cl.isParallelWriteable();} ); 
}
// poplar::Tensor::getContiguousRegions()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorGetContiguousRegions", [](poplar::Tensor& cl) {return cl.getContiguousRegions();} ); 
}
// poplar::Tensor::getVarRegions()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorGetVarRegions", [](poplar::Tensor& cl) {return cl.getVarRegions();} ); 
}
// poplar::Tensor::intersectsWith(const poplar::Tensor &)__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorIntersectsWith", [](poplar::Tensor& cl, const poplar::Tensor & a) {return cl.intersectsWith(a);} ); 
}
// poplar::Tensor::dump()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorDump", [](poplar::Tensor& cl) {return cl.dump();} ); 
}
// poplar::Tensor::dumpRegions()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorDumpRegions", [](poplar::Tensor& cl) {return cl.dumpRegions();} ); 
}
// poplar::Tensor::valid()__CXXMethod
{ using namespace poplar; 
JLTensor.method("TensorValid", [](poplar::Tensor& cl) {return cl.valid();} ); 
}
// poplar::concat(ArrayRef<poplar::Tensor>, unsigned int)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarConcat", [](ArrayRef<poplar::Tensor> a, unsigned int b) {return poplar::concat(a, b);} ); }
// poplar::concat(const poplar::Tensor &, const poplar::Tensor &, unsigned int)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarConcat", [](const poplar::Tensor & a, const poplar::Tensor & b, unsigned int c) {return poplar::concat(a, b, c);} ); }
// poplar::append(const poplar::Tensor &, const poplar::Tensor &, unsigned int)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarAppend", [](const poplar::Tensor & a, const poplar::Tensor & b, unsigned int c) {return poplar::append(a, b, c);} ); }
// poplar::append(const poplar::Tensor &, const poplar::Tensor &)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarAppend", [](const poplar::Tensor & a, const poplar::Tensor & b) {return poplar::append(a, b);} ); }
// poplar::program::Program::Program(const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramProgram.constructor<const poplar::program::Program &>();
}
// poplar::program::Program::isEmpty()__CXXMethod
{ using namespace poplar::program; 
JLProgramProgram.method("ProgramProgramIsEmpty", [](poplar::program::Program& cl) {return cl.isEmpty();} ); 
}
// poplar::program::Execute::Execute(poplar::ComputeSet)__CXXConstructor
{ using namespace poplar::program; 
JLProgramExecute.constructor<poplar::ComputeSet>();
}
// poplar::program::Execute::Execute(poplar::ComputeSet, poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramExecute.constructor<poplar::ComputeSet, poplar::Tensor>();
}
// poplar::program::Sequence::add(const poplar::program::Program &)__CXXMethod
{ using namespace poplar::program; 
JLProgramSequence.method("ProgramSequenceAdd", [](poplar::program::Sequence& cl, const poplar::program::Program & a) {return cl.add(a);} ); 
}
// poplar::program::Repeat::Repeat(unsigned int, const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramRepeat.constructor<unsigned int, const poplar::program::Program &>();
}
// poplar::program::RepeatWhileFalse::RepeatWhileFalse(const poplar::program::Program &, poplar::Tensor, const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramRepeatWhileFalse.constructor<const poplar::program::Program &, poplar::Tensor, const poplar::program::Program &>();
}
// poplar::program::RepeatWhileTrue::RepeatWhileTrue(const poplar::program::Program &, poplar::Tensor, const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramRepeatWhileTrue.constructor<const poplar::program::Program &, poplar::Tensor, const poplar::program::Program &>();
}
// poplar::program::If::If(poplar::Tensor, const poplar::program::Program &, const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramIf.constructor<poplar::Tensor, const poplar::program::Program &, const poplar::program::Program &>();
}
// poplar::program::Switch::Switch(poplar::Tensor, const std::vector<std::pair<std::int32_t, Program> > &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramSwitch.constructor<poplar::Tensor, const std::vector<std::pair<std::int32_t, Program> > &>();
}
// poplar::program::Switch::Switch(poplar::Tensor, const std::vector<std::pair<std::int32_t, Program> > &, const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramSwitch.constructor<poplar::Tensor, const std::vector<std::pair<std::int32_t, Program> > &, const poplar::program::Program &>();
}
// poplar::program::Switch::Switch(poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramSwitch.constructor<poplar::Tensor>();
}
// poplar::program::Switch::Switch(poplar::Tensor, const poplar::program::Program &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramSwitch.constructor<poplar::Tensor, const poplar::program::Program &>();
}
// poplar::program::Switch::add(std::int32_t, const poplar::program::Program &)__CXXMethod
{ using namespace poplar::program; 
JLProgramSwitch.method("ProgramSwitchAdd", [](poplar::program::Switch& cl, std::int32_t a, const poplar::program::Program & b) {return cl.add(a, b);} ); 
}
// poplar::program::Switch::switchWithBoundsChecking(poplar::Tensor, const std::vector<std::pair<std::int32_t, Program> > &)__CXXMethod
{ using namespace poplar::program; 
JLProgramSwitch.method("ProgramSwitchSwitchWithBoundsChecking", [](poplar::program::Switch& cl, poplar::Tensor a, const std::vector<std::pair<std::int32_t, Program> > & b) {return cl.switchWithBoundsChecking(a, b);} ); 
}
// poplar::program::Switch::switchWithUnreachableDefault(poplar::Tensor)__CXXMethod
{ using namespace poplar::program; 
JLProgramSwitch.method("ProgramSwitchSwitchWithUnreachableDefault", [](poplar::program::Switch& cl, poplar::Tensor a) {return cl.switchWithUnreachableDefault(a);} ); 
}
// poplar::program::Copy::Copy(poplar::Tensor, poplar::Tensor, bool)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<poplar::Tensor, poplar::Tensor>();
JLProgramCopy.constructor<poplar::Tensor, poplar::Tensor, bool>();
}
// poplar::program::Copy::Copy(const poplar::DataStream &, poplar::Tensor, bool)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<const poplar::DataStream &, poplar::Tensor>();
JLProgramCopy.constructor<const poplar::DataStream &, poplar::Tensor, bool>();
}
// poplar::program::Copy::Copy(poplar::Tensor, const poplar::DataStream &, bool)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<poplar::Tensor, const poplar::DataStream &>();
JLProgramCopy.constructor<poplar::Tensor, const poplar::DataStream &, bool>();
}
// poplar::program::Copy::Copy(const poplar::RemoteBuffer &, poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<const poplar::RemoteBuffer &, poplar::Tensor>();
}
// poplar::program::Copy::Copy(const poplar::RemoteBuffer &, poplar::Tensor, poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<const poplar::RemoteBuffer &, poplar::Tensor, poplar::Tensor>();
}
// poplar::program::Copy::Copy(poplar::Tensor, const poplar::RemoteBuffer &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<poplar::Tensor, const poplar::RemoteBuffer &>();
}
// poplar::program::Copy::Copy(poplar::Tensor, const poplar::RemoteBuffer &, poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<poplar::Tensor, const poplar::RemoteBuffer &, poplar::Tensor>();
}
// poplar::program::Copy::Copy(const poplar::DataStream &, poplar::Tensor, poplar::Tensor, bool, const poplar::OptionFlags &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<const poplar::DataStream &, poplar::Tensor, poplar::Tensor>();
JLProgramCopy.constructor<const poplar::DataStream &, poplar::Tensor, poplar::Tensor, bool>();
JLProgramCopy.constructor<const poplar::DataStream &, poplar::Tensor, poplar::Tensor, bool, const poplar::OptionFlags &>();
}
// poplar::program::Copy::Copy(poplar::Tensor, const poplar::DataStream &, poplar::Tensor, bool, const poplar::OptionFlags &)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCopy.constructor<poplar::Tensor, const poplar::DataStream &, poplar::Tensor>();
JLProgramCopy.constructor<poplar::Tensor, const poplar::DataStream &, poplar::Tensor, bool>();
JLProgramCopy.constructor<poplar::Tensor, const poplar::DataStream &, poplar::Tensor, bool, const poplar::OptionFlags &>();
}
// poplar::program::CrossReplicaCopy::CrossReplicaCopy(poplar::Tensor, poplar::Tensor, std::map<unsigned int, unsigned int>)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCrossReplicaCopy.constructor<poplar::Tensor, poplar::Tensor, std::map<unsigned int, unsigned int>>();
}
// poplar::program::WriteUndef::WriteUndef(poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramWriteUndef.constructor<poplar::Tensor>();
}
// poplar::program::Sync::Sync(poplar::SyncType)__CXXConstructor
{ using namespace poplar::program; 
JLProgramSync.constructor<poplar::SyncType>();
}
// poplar::program::Call::Call(poplar::Function)__CXXConstructor
{ using namespace poplar::program; 
JLProgramCall.constructor<poplar::Function>();
}
// poplar::program::PrintTensor::PrintTensor(poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramPrintTensor.constructor<poplar::Tensor>();
}
// poplar::program::PrintTensor::PrintTensor(std::string, poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramPrintTensor.constructor<std::string, poplar::Tensor>();
}
// poplar::program::ErrorProgram::ErrorProgram(std::string, poplar::Tensor)__CXXConstructor
{ using namespace poplar::program; 
JLProgramErrorProgram.constructor<std::string, poplar::Tensor>();
}
// poplar::TensorCloneMethod::PRESERVE_ORDER_AND_ALIASES__EnumConstantDecl
mod.set_const("PoplarTensorCloneMethodPoplarPRESERVE_ORDER_AND_ALIASES", poplar::TensorCloneMethod::PRESERVE_ORDER_AND_ALIASES);
// poplar::TensorCloneMethod::CREATE_NEW_ORDER__EnumConstantDecl
mod.set_const("PoplarTensorCloneMethodPoplarCREATE_NEW_ORDER", poplar::TensorCloneMethod::CREATE_NEW_ORDER);
// poplar::TensorCloneMethod::PRESERVE_ORDER_UNLESS_ALIASES__EnumConstantDecl
mod.set_const("PoplarTensorCloneMethodPoplarPRESERVE_ORDER_UNLESS_ALIASES", poplar::TensorCloneMethod::PRESERVE_ORDER_UNLESS_ALIASES);
// poplar::toString(const poplar::TensorCloneMethod &)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarToString", [](const poplar::TensorCloneMethod & a) {return poplar::toString(a);} ); }
// poplar::TensorCloneDuplicationMethod::DUPLICATE_BY_OUTER_DIMENSION__EnumConstantDecl
mod.set_const("PoplarTensorCloneDuplicationMethodPoplarDUPLICATE_BY_OUTER_DIMENSION", poplar::TensorCloneDuplicationMethod::DUPLICATE_BY_OUTER_DIMENSION);
// poplar::TensorCloneDuplicationMethod::DUPLICATE_BY_TILE_CONTIGUOUS_REGION__EnumConstantDecl
mod.set_const("PoplarTensorCloneDuplicationMethodPoplarDUPLICATE_BY_TILE_CONTIGUOUS_REGION", poplar::TensorCloneDuplicationMethod::DUPLICATE_BY_TILE_CONTIGUOUS_REGION);
// poplar::VariableMappingMethod::NONE__EnumConstantDecl
mod.set_const("PoplarVariableMappingMethodPoplarNONE", poplar::VariableMappingMethod::NONE);
// poplar::VariableMappingMethod::LINEAR__EnumConstantDecl
mod.set_const("PoplarVariableMappingMethodPoplarLINEAR", poplar::VariableMappingMethod::LINEAR);
// poplar::toString(const poplar::VariableMappingMethod &)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarToString", [](const poplar::VariableMappingMethod & a) {return poplar::toString(a);} ); }
// poplar::VariableRef::VariableRef(unsigned int, unsigned int)__CXXConstructor
{ using namespace poplar; 
JLVariableRef.constructor<unsigned int, unsigned int>();
}
// poplar::VariableRef::VariableRef(const poplar::VariableRef &)__CXXConstructor
{ using namespace poplar; 
JLVariableRef.constructor<const poplar::VariableRef &>();
}
// poplar::VariableRef::hash()__CXXMethod
{ using namespace poplar; 
JLVariableRef.method("VariableRefHash", [](poplar::VariableRef& cl) {return cl.hash();} ); 
}
// poplar::VariableInterval::VariableInterval(poplar::VariableRef, poplar::Interval)__CXXConstructor
{ using namespace poplar; 
JLVariableInterval.constructor<poplar::VariableRef, poplar::Interval>();
}
// poplar::VariableInterval::VariableInterval(const poplar::VariableInterval &)__CXXConstructor
{ using namespace poplar; 
JLVariableInterval.constructor<const poplar::VariableInterval &>();
}
// poplar::FieldData::rank()__CXXMethod
{ using namespace poplar; 
JLFieldData.method("FieldDataRank", [](poplar::FieldData& cl) {return cl.rank();} ); 
}
// poplar::FieldData::size()__CXXMethod
{ using namespace poplar; 
JLFieldData.method("FieldDataSize", [](poplar::FieldData& cl) {return cl.size();} ); 
}
// poplar::FieldData::getSizeAtIndex(std::size_t)__CXXMethod
{ using namespace poplar; 
JLFieldData.method("FieldDataGetSizeAtIndex", [](poplar::FieldData& cl, std::size_t a) {return cl.getSizeAtIndex(a);} ); 
}
// poplar::FieldData::getProfilerVectorLayout(std::size_t)__CXXMethod
{ using namespace poplar; 
JLFieldData.method("FieldDataGetProfilerVectorLayout", [](poplar::FieldData& cl, std::size_t a) {return cl.getProfilerVectorLayout(a);} ); 
}
// poplar::FieldData::getProfilerVectorListLayout()__CXXMethod
{ using namespace poplar; 
JLFieldData.method("FieldDataGetProfilerVectorListLayout", [](poplar::FieldData& cl) {return cl.getProfilerVectorListLayout();} ); 
}
// poplar::FieldData::name()__CXXMethod
{ using namespace poplar; 
JLFieldData.method("FieldDataName", [](poplar::FieldData& cl) {return cl.name();} ); 
}
// poplar::VertexIntrospector::getFieldInfo(const std::string &)__CXXMethod
{ using namespace poplar; 
JLVertexIntrospector.method("VertexIntrospectorGetFieldInfo", [](poplar::VertexIntrospector& cl, const std::string & a) {return cl.getFieldInfo(a);} ); 
}
// poplar::VertexIntrospector::getComputeSet()__CXXMethod
{ using namespace poplar; 
JLVertexIntrospector.method("VertexIntrospectorGetComputeSet", [](poplar::VertexIntrospector& cl) {return cl.getComputeSet();} ); 
}
// poplar::replication_factor::replication_factor(unsigned int)__CXXConstructor
{ using namespace poplar; 
JLReplication_factor.constructor<unsigned int>();
}
// poplar::versionString()__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarVersionString", []() {return poplar::versionString();} ); }
// poplar::packageHash()__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarPackageHash", []() {return poplar::packageHash();} ); }
// poplar::Graph::Graph(const poplar::Target &, poplar::replication_factor)__CXXConstructor
{ using namespace poplar; 
JLGraph.constructor<const poplar::Target &>();
JLGraph.constructor<const poplar::Target &, poplar::replication_factor>();
}
// poplar::Graph::Graph(const poplar::Device &, poplar::replication_factor)__CXXConstructor
{ using namespace poplar; 
JLGraph.constructor<const poplar::Device &>();
JLGraph.constructor<const poplar::Device &, poplar::replication_factor>();
}
// poplar::Graph::getTarget()__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetTarget", [](poplar::Graph& cl) {return cl.getTarget();} ); 
}
// poplar::Graph::addCodelets(std::string, poplar::CodeletFileType, std::string)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, std::string a) {return cl.addCodelets(a);} ); 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, std::string a, poplar::CodeletFileType b) {return cl.addCodelets(a, b);} ); 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, std::string a, poplar::CodeletFileType b, std::string c) {return cl.addCodelets(a, b, c);} ); 
}
// poplar::Graph::addCodelets(ArrayRef<std::string>, std::string)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, ArrayRef<std::string> a) {return cl.addCodelets(a);} ); 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, ArrayRef<std::string> a, std::string b) {return cl.addCodelets(a, b);} ); 
}
// poplar::Graph::addCodelets(std::stringstream &, std::string)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, std::stringstream & a) {return cl.addCodelets(a);} ); 
JLGraph.method("GraphAddCodelets", [](poplar::Graph& cl, std::stringstream & a, std::string b) {return cl.addCodelets(a, b);} ); 
}
// poplar::Graph::ConnectionDesc::ConnectionDesc(std::string, poplar::Tensor)__CXXConstructor
{ using namespace poplar; 
JLGraphConnectionDesc.constructor<std::string, poplar::Tensor>();
}
// poplar::Graph::ConnectionDesc::ConnectionDesc(std::string, ArrayRef<poplar::Tensor>)__CXXConstructor
{ using namespace poplar; 
JLGraphConnectionDesc.constructor<std::string, ArrayRef<poplar::Tensor>>();
}
// poplar::Graph::addVertex(poplar::ComputeSet, std::string)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddVertex", [](poplar::Graph& cl, poplar::ComputeSet a, std::string b) {return cl.addVertex(a, b);} ); 
}
// poplar::Graph::addVertex(poplar::ComputeSet, std::string, ArrayRef<poplar::Graph::ConnectionDesc>)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddVertex", [](poplar::Graph& cl, poplar::ComputeSet a, std::string b, ArrayRef<poplar::Graph::ConnectionDesc> c) {return cl.addVertex(a, b, c);} ); 
}
// poplar::Graph::addExternalExchangeVertex(poplar::ComputeSet, std::string, unsigned int, bool, bool)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddExternalExchangeVertex", [](poplar::Graph& cl, poplar::ComputeSet a, std::string b, unsigned int c, bool d, bool e) {return cl.addExternalExchangeVertex(a, b, c, d, e);} ); 
}
// poplar::Graph::addVariable(const poplar::Type &, ArrayRef<std::size_t>, const poplar::DebugContext &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddVariable", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b) {return cl.addVariable(a, jlcxxToPoplar(b));} ); 
JLGraph.method("GraphAddVariable", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, std::string c) {return cl.addVariable(a, jlcxxToPoplar(b), c);} ); 
}
// poplar::Graph::addVariable(const poplar::Type &, ArrayRef<std::size_t>, poplar::VariableMappingMethod, const poplar::DebugContext &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddVariable", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, poplar::VariableMappingMethod c) {return cl.addVariable(a, jlcxxToPoplar(b), c);} ); 
JLGraph.method("GraphAddVariable", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, poplar::VariableMappingMethod c, std::string d) {return cl.addVariable(a, jlcxxToPoplar(b), c, d);} ); 
}
// poplar::Graph::addConstant(const poplar::Type &, ArrayRef<std::size_t>, ArrayRef<T>, const poplar::DebugContext &)__FunctionTemplate
{ using namespace poplar; 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<int> c) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c));} ); 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<int> c, std::string d) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c), d);} ); 
}{ using namespace poplar; 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<long> c) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c));} ); 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<long> c, std::string d) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c), d);} ); 
}{ using namespace poplar; 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<float> c) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c));} ); 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<float> c, std::string d) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c), d);} ); 
}{ using namespace poplar; 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<double> c) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c));} ); 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, jlcxx::ArrayRef<double> c, std::string d) {return cl.addConstant(a, jlcxxToPoplar(b), jlcxxToPoplar(c), d);} ); 
}
// poplar::Graph::addConstant(const poplar::Type &, ArrayRef<std::size_t>, const void *, const poplar::TypeTraits &, bool, const poplar::DebugContext &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, const void * c, const poplar::TypeTraits & d, bool e) {return cl.addConstant(a, jlcxxToPoplar(b), c, d, e);} ); 
JLGraph.method("GraphAddConstant", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, const void * c, const poplar::TypeTraits & d, bool e, std::string f) {return cl.addConstant(a, jlcxxToPoplar(b), c, d, e, f);} ); 
}
// poplar::Graph::addConstantHalf(const poplar::Type &, ArrayRef<std::size_t>, uint16_t, const poplar::DebugContext &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddConstantHalf", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, uint16_t c) {return cl.addConstantHalf(a, jlcxxToPoplar(b), c);} ); 
JLGraph.method("GraphAddConstantHalf", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, uint16_t c, std::string d) {return cl.addConstantHalf(a, jlcxxToPoplar(b), c, d);} ); 
}
// poplar::Graph::addConstantHalf(const poplar::Type &, ArrayRef<std::size_t>, const uint16_t *, const poplar::DebugContext &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddConstantHalf", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, const uint16_t * c) {return cl.addConstantHalf(a, jlcxxToPoplar(b), c);} ); 
JLGraph.method("GraphAddConstantHalf", [](poplar::Graph& cl, const poplar::Type & a, jlcxx::ArrayRef<std::size_t> b, const uint16_t * c, std::string d) {return cl.addConstantHalf(a, jlcxxToPoplar(b), c, d);} ); 
}
// poplar::Graph::clone(const poplar::Type &, const poplar::Tensor &, const poplar::DebugContext &, poplar::TensorCloneMethod)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphClone", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b) {return cl.clone(a, b);} ); 
JLGraph.method("GraphClone", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b, std::string c) {return cl.clone(a, b, c);} ); 
JLGraph.method("GraphClone", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b, std::string c, poplar::TensorCloneMethod d) {return cl.clone(a, b, c, d);} ); 
}
// poplar::Graph::cloneN(const poplar::Type &, const poplar::Tensor &, std::size_t, const poplar::DebugContext &, poplar::TensorCloneMethod, poplar::TensorCloneDuplicationMethod)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b, std::size_t c) {return cl.cloneN(a, b, c);} ); 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b, std::size_t c, std::string d) {return cl.cloneN(a, b, c, d);} ); 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b, std::size_t c, std::string d, poplar::TensorCloneMethod e) {return cl.cloneN(a, b, c, d, e);} ); 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Type & a, const poplar::Tensor & b, std::size_t c, std::string d, poplar::TensorCloneMethod e, poplar::TensorCloneDuplicationMethod f) {return cl.cloneN(a, b, c, d, e, f);} ); 
}
// poplar::Graph::clone(const poplar::Tensor &, const poplar::DebugContext &, poplar::TensorCloneMethod)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphClone", [](poplar::Graph& cl, const poplar::Tensor & a) {return cl.clone(a);} ); 
JLGraph.method("GraphClone", [](poplar::Graph& cl, const poplar::Tensor & a, std::string b) {return cl.clone(a, b);} ); 
JLGraph.method("GraphClone", [](poplar::Graph& cl, const poplar::Tensor & a, std::string b, poplar::TensorCloneMethod c) {return cl.clone(a, b, c);} ); 
}
// poplar::Graph::cloneN(const poplar::Tensor &, std::size_t, const poplar::DebugContext &, poplar::TensorCloneMethod, poplar::TensorCloneDuplicationMethod)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Tensor & a, std::size_t b) {return cl.cloneN(a, b);} ); 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Tensor & a, std::size_t b, std::string c) {return cl.cloneN(a, b, c);} ); 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Tensor & a, std::size_t b, std::string c, poplar::TensorCloneMethod d) {return cl.cloneN(a, b, c, d);} ); 
JLGraph.method("GraphCloneN", [](poplar::Graph& cl, const poplar::Tensor & a, std::size_t b, std::string c, poplar::TensorCloneMethod d, poplar::TensorCloneDuplicationMethod e) {return cl.cloneN(a, b, c, d, e);} ); 
}
// poplar::Graph::connect(poplar::FieldRef, const poplar::Tensor &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphConnect", [](poplar::Graph& cl, poplar::FieldRef a, const poplar::Tensor & b) {return cl.connect(a, b);} ); 
}
// poplar::Graph::connect(poplar::FieldRef, ArrayRef<poplar::Tensor>)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphConnect", [](poplar::Graph& cl, poplar::FieldRef a, ArrayRef<poplar::Tensor> b) {return cl.connect(a, b);} ); 
}
// poplar::Graph::setCycleEstimate(const poplar::VertexRef &, std::uint64_t)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetCycleEstimate", [](poplar::Graph& cl, const poplar::VertexRef & a, std::uint64_t b) {return cl.setCycleEstimate(a, b);} ); 
}
// poplar::Graph::getCycleEstimate(const poplar::VertexRef &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetCycleEstimate", [](poplar::Graph& cl, const poplar::VertexRef & a) {return cl.getCycleEstimate(a);} ); 
}
// poplar::Graph::getNumVertices()__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetNumVertices", [](poplar::Graph& cl) {return cl.getNumVertices();} ); 
}
// poplar::Graph::addComputeSet(const poplar::DebugContext &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddComputeSet", [](poplar::Graph& cl) {return cl.addComputeSet();} ); 
JLGraph.method("GraphAddComputeSet", [](poplar::Graph& cl, std::string a) {return cl.addComputeSet(a);} ); 
}
// poplar::Graph::setFieldSize(poplar::FieldRef, std::size_t)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetFieldSize", [](poplar::Graph& cl, poplar::FieldRef a, std::size_t b) {return cl.setFieldSize(a, b);} ); 
}
// poplar::Graph::getFieldSize(poplar::FieldRef)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetFieldSize", [](poplar::Graph& cl, poplar::FieldRef a) {return cl.getFieldSize(a);} ); 
}
// poplar::Graph::getMaxFieldDim(std::string, std::string, unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetMaxFieldDim", [](poplar::Graph& cl, std::string a, std::string b, unsigned int c) {return cl.getMaxFieldDim(a, b, c);} ); 
}
// poplar::Graph::getMaxVertexFieldValue(std::string, std::string)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetMaxVertexFieldValue", [](poplar::Graph& cl, std::string a, std::string b) {return cl.getMaxVertexFieldValue(a, b);} ); 
}
// poplar::Graph::setInitialValueHalf(poplar::FieldRef, uint16_t)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetInitialValueHalf", [](poplar::Graph& cl, poplar::FieldRef a, uint16_t b) {return cl.setInitialValueHalf(a, b);} ); 
}
// poplar::Graph::setInitialValue(poplar::FieldRef, ArrayRef<T>)__FunctionTemplate
{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, poplar::FieldRef a, jlcxx::ArrayRef<int> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, poplar::FieldRef a, jlcxx::ArrayRef<long> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, poplar::FieldRef a, jlcxx::ArrayRef<float> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, poplar::FieldRef a, jlcxx::ArrayRef<double> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}
// poplar::Graph::setInitialValueHalf(poplar::FieldRef, ArrayRef<uint16_t>)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetInitialValueHalf", [](poplar::Graph& cl, poplar::FieldRef a, jlcxx::ArrayRef<uint16_t> b) {return cl.setInitialValueHalf(a, jlcxxToPoplar(b));} ); 
}
// poplar::Graph::setInitialValue(const poplar::Tensor &, ArrayRef<T>)__FunctionTemplate
{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, const poplar::Tensor & a, jlcxx::ArrayRef<int> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, const poplar::Tensor & a, jlcxx::ArrayRef<long> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, const poplar::Tensor & a, jlcxx::ArrayRef<float> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}{ using namespace poplar; 
JLGraph.method("GraphSetInitialValue", [](poplar::Graph& cl, const poplar::Tensor & a, jlcxx::ArrayRef<double> b) {return cl.setInitialValue(a, jlcxxToPoplar(b));} ); 
}
// poplar::Graph::setInitialValueHalf(const poplar::Tensor &, uint16_t)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetInitialValueHalf", [](poplar::Graph& cl, const poplar::Tensor & a, uint16_t b) {return cl.setInitialValueHalf(a, b);} ); 
}
// poplar::Graph::setInitialValueHalf(const poplar::Tensor &, ArrayRef<uint16_t>)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetInitialValueHalf", [](poplar::Graph& cl, const poplar::Tensor & a, jlcxx::ArrayRef<uint16_t> b) {return cl.setInitialValueHalf(a, jlcxxToPoplar(b));} ); 
}
// poplar::Graph::createHostWrite(std::string, const poplar::Tensor &, bool)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCreateHostWrite", [](poplar::Graph& cl, std::string a, const poplar::Tensor & b) {return cl.createHostWrite(a, b);} ); 
JLGraph.method("GraphCreateHostWrite", [](poplar::Graph& cl, std::string a, const poplar::Tensor & b, bool c) {return cl.createHostWrite(a, b, c);} ); 
}
// poplar::Graph::createHostRead(std::string, const poplar::Tensor &, bool)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCreateHostRead", [](poplar::Graph& cl, std::string a, const poplar::Tensor & b) {return cl.createHostRead(a, b);} ); 
JLGraph.method("GraphCreateHostRead", [](poplar::Graph& cl, std::string a, const poplar::Tensor & b, bool c) {return cl.createHostRead(a, b, c);} ); 
}
// poplar::Graph::addHostToDeviceFIFO(std::string, const poplar::Type &, std::size_t, poplar::ReplicatedStreamMode, const poplar::OptionFlags &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddHostToDeviceFIFO", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c) {return cl.addHostToDeviceFIFO(a, b, c);} ); 
JLGraph.method("GraphAddHostToDeviceFIFO", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c, poplar::ReplicatedStreamMode d) {return cl.addHostToDeviceFIFO(a, b, c, d);} ); 
JLGraph.method("GraphAddHostToDeviceFIFO", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c, poplar::ReplicatedStreamMode d, const poplar::OptionFlags & e) {return cl.addHostToDeviceFIFO(a, b, c, d, e);} ); 
}
// poplar::Graph::addDeviceToHostFIFO(std::string, const poplar::Type &, std::size_t, const poplar::OptionFlags &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddDeviceToHostFIFO", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c) {return cl.addDeviceToHostFIFO(a, b, c);} ); 
JLGraph.method("GraphAddDeviceToHostFIFO", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c, const poplar::OptionFlags & d) {return cl.addDeviceToHostFIFO(a, b, c, d);} ); 
}
// poplar::Graph::addRemoteBuffer(std::string, const poplar::Type &, std::size_t, std::size_t, bool, bool)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddRemoteBuffer", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c) {return cl.addRemoteBuffer(a, b, c);} ); 
JLGraph.method("GraphAddRemoteBuffer", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c, std::size_t d) {return cl.addRemoteBuffer(a, b, c, d);} ); 
JLGraph.method("GraphAddRemoteBuffer", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c, std::size_t d, bool e) {return cl.addRemoteBuffer(a, b, c, d, e);} ); 
JLGraph.method("GraphAddRemoteBuffer", [](poplar::Graph& cl, std::string a, const poplar::Type & b, std::size_t c, std::size_t d, bool e, bool f) {return cl.addRemoteBuffer(a, b, c, d, e, f);} ); 
}
// poplar::Graph::setTileMapping(poplar::VertexRef, unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetTileMapping", [](poplar::Graph& cl, poplar::VertexRef a, unsigned int b) {return cl.setTileMapping(a, b);} ); 
}
// poplar::Graph::setTileMapping(const poplar::Tensor &, unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetTileMapping", [](poplar::Graph& cl, const poplar::Tensor & a, unsigned int b) {return cl.setTileMapping(a, b);} ); 
}
// poplar::Graph::getTileMapping(const poplar::Tensor &, bool)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetTileMapping", [](poplar::Graph& cl, const poplar::Tensor & a) {return cl.getTileMapping(a);} ); 
JLGraph.method("GraphGetTileMapping", [](poplar::Graph& cl, const poplar::Tensor & a, bool b) {return cl.getTileMapping(a, b);} ); 
}
// poplar::Graph::getTileMapping(const poplar::Tensor &, bool *)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetTileMapping", [](poplar::Graph& cl, const poplar::Tensor & a, bool * b) {return cl.getTileMapping(a, b);} ); 
}
// poplar::Graph::getVariableTileMapping(const poplar::Tensor &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetVariableTileMapping", [](poplar::Graph& cl, const poplar::Tensor & a) {return cl.getVariableTileMapping(a);} ); 
}
// poplar::Graph::setTileMapping(const poplar::Tensor &, const poplar::Graph::TileToTensorMapping &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphSetTileMapping", [](poplar::Graph& cl, const poplar::Tensor & a, const poplar::Graph::TileToTensorMapping & b) {return cl.setTileMapping(a, b);} ); 
}
// poplar::Graph::getVariable(poplar::VariableRef)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetVariable", [](poplar::Graph& cl, poplar::VariableRef a) {return cl.getVariable(a);} ); 
}
// poplar::Graph::isConstant(poplar::VariableRef)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphIsConstant", [](poplar::Graph& cl, poplar::VariableRef a) {return cl.isConstant(a);} ); 
}
// poplar::Graph::getSortedContiguousRegions(const poplar::Tensor &, ArrayRef<poplar::Interval>, bool, std::vector<std::size_t> *)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetSortedContiguousRegions", [](poplar::Graph& cl, const poplar::Tensor & a, ArrayRef<poplar::Interval> b) {return cl.getSortedContiguousRegions(a, b);} ); 
JLGraph.method("GraphGetSortedContiguousRegions", [](poplar::Graph& cl, const poplar::Tensor & a, ArrayRef<poplar::Interval> b, bool c) {return cl.getSortedContiguousRegions(a, b, c);} ); 
JLGraph.method("GraphGetSortedContiguousRegions", [](poplar::Graph& cl, const poplar::Tensor & a, ArrayRef<poplar::Interval> b, bool c, std::vector<std::size_t> * d) {return cl.getSortedContiguousRegions(a, b, c, d);} ); 
}
// poplar::Graph::reorderToSimplify(poplar::Tensor *, ArrayRef<poplar::Tensor *>, bool)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphReorderToSimplify", [](poplar::Graph& cl, poplar::Tensor * a, ArrayRef<poplar::Tensor *> b) {return cl.reorderToSimplify(a, b);} ); 
JLGraph.method("GraphReorderToSimplify", [](poplar::Graph& cl, poplar::Tensor * a, ArrayRef<poplar::Tensor *> b, bool c) {return cl.reorderToSimplify(a, b, c);} ); 
}
// poplar::Graph::findUnbroadcastTensor(const poplar::Tensor &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphFindUnbroadcastTensor", [](poplar::Graph& cl, const poplar::Tensor & a) {return cl.findUnbroadcastTensor(a);} ); 
}
// poplar::Graph::createVirtualGraph(unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCreateVirtualGraph", [](poplar::Graph& cl, unsigned int a) {return cl.createVirtualGraph(a);} ); 
}
// poplar::Graph::createVirtualGraph(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCreateVirtualGraph", [](poplar::Graph& cl, unsigned int a, unsigned int b) {return cl.createVirtualGraph(a, b);} ); 
}
// poplar::Graph::createVirtualGraph(const std::vector<unsigned int> &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCreateVirtualGraph", [](poplar::Graph& cl, const std::vector<unsigned int> & a) {return cl.createVirtualGraph(a);} ); 
}
// poplar::Graph::createReplicatedGraph(unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphCreateReplicatedGraph", [](poplar::Graph& cl, unsigned int a) {return cl.createReplicatedGraph(a);} ); 
}
// poplar::Graph::getTopLevelGraph()__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetTopLevelGraph", [](poplar::Graph& cl) {return cl.getTopLevelGraph();} ); 
}
// poplar::Graph::getReplicationFactor()__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetReplicationFactor", [](poplar::Graph& cl) {return cl.getReplicationFactor();} ); 
}
// poplar::Graph::addReplicationIndexConstant()__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddReplicationIndexConstant", [](poplar::Graph& cl) {return cl.addReplicationIndexConstant();} ); 
}
// poplar::Graph::getNonReplicatedTensor(const poplar::Tensor &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphGetNonReplicatedTensor", [](poplar::Graph& cl, const poplar::Tensor & a) {return cl.getNonReplicatedTensor(a);} ); 
}
// poplar::Graph::addFunction(const program::Program &)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphAddFunction", [](poplar::Graph& cl, const program::Program & a) {return cl.addFunction(a);} ); 
}
// poplar::Graph::convertVirtualTileToPhysicalTile(unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphConvertVirtualTileToPhysicalTile", [](poplar::Graph& cl, unsigned int a) {return cl.convertVirtualTileToPhysicalTile(a);} ); 
}
// poplar::Graph::convertPhysicalTileToVirtualTile(unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphConvertPhysicalTileToVirtualTile", [](poplar::Graph& cl, unsigned int a) {return cl.convertPhysicalTileToVirtualTile(a);} ); 
}
// poplar::Graph::convertPhysicalTileToVirtualTile(unsigned int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphConvertPhysicalTileToVirtualTile", [](poplar::Graph& cl, unsigned int a, unsigned int b) {return cl.convertPhysicalTileToVirtualTile(a, b);} ); 
}
// poplar::Graph::hasCodelet(std::string)__CXXMethod
{ using namespace poplar; 
JLGraph.method("GraphHasCodelet", [](poplar::Graph& cl, std::string a) {return cl.hasCodelet(a);} ); 
}
// poplar::StreamCallback::Result::Success__EnumConstantDecl
mod.set_const("StreamCallbackResultStreamCallbackSuccess", poplar::StreamCallback::Result::Success);
// poplar::StreamCallback::Result::NotAvailable__EnumConstantDecl
mod.set_const("StreamCallbackResultStreamCallbackNotAvailable", poplar::StreamCallback::Result::NotAvailable);
// poplar::StreamCallback::prefetch(void *)__CXXMethod
{ using namespace poplar; 
JLStreamCallback.method("StreamCallbackPrefetch", [](poplar::StreamCallback& cl, void * a) {return cl.prefetch(a);} ); 
}
// poplar::StreamCallback::complete()__CXXMethod
{ using namespace poplar; 
JLStreamCallback.method("StreamCallbackComplete", [](poplar::StreamCallback& cl) {return cl.complete();} ); 
}
// poplar::StreamCallback::fetch(void *)__CXXMethod
{ using namespace poplar; 
JLStreamCallback.method("StreamCallbackFetch", [](poplar::StreamCallback& cl, void * a) {return cl.fetch(a);} ); 
}
// poplar::LegacyStreamCallback::prefetch(void *)__CXXMethod
{ using namespace poplar; 
JLLegacyStreamCallback.method("LegacyStreamCallbackPrefetch", [](poplar::LegacyStreamCallback& cl, void * a) {return cl.prefetch(a);} ); 
}
// poplar::LegacyStreamCallback::complete()__CXXMethod
{ using namespace poplar; 
JLLegacyStreamCallback.method("LegacyStreamCallbackComplete", [](poplar::LegacyStreamCallback& cl) {return cl.complete();} ); 
}
// poplar::Engine::Engine(const poplar::Graph &, ArrayRef<program::Program>, const poplar::OptionFlags &, poplar::Engine::ProgressFunc)__CXXConstructor
{ using namespace poplar; 
JLEngine.constructor<const poplar::Graph &, ArrayRef<program::Program>>();
JLEngine.constructor<const poplar::Graph &, ArrayRef<program::Program>, const poplar::OptionFlags &>();
JLEngine.constructor<const poplar::Graph &, ArrayRef<program::Program>, const poplar::OptionFlags &, poplar::Engine::ProgressFunc>();
}
// poplar::Engine::Engine(const poplar::Graph &, program::Program, const poplar::OptionFlags &, poplar::Engine::ProgressFunc)__CXXConstructor
{ using namespace poplar; 
JLEngine.constructor<const poplar::Graph &, program::Program>();
JLEngine.constructor<const poplar::Graph &, program::Program, const poplar::OptionFlags &>();
JLEngine.constructor<const poplar::Graph &, program::Program, const poplar::OptionFlags &, poplar::Engine::ProgressFunc>();
}
// poplar::Engine::prepare(const poplar::Device &)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EnginePrepare", [](poplar::Engine& cl, const poplar::Device & a) {return cl.prepare(a);} ); 
}
// poplar::Engine::deploy()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineDeploy", [](poplar::Engine& cl) {return cl.deploy();} ); 
}
// poplar::Engine::load(const poplar::Device &)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineLoad", [](poplar::Engine& cl, const poplar::Device & a) {return cl.load(a);} ); 
}
// poplar::Engine::run(unsigned int, const std::string &)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineRun", [](poplar::Engine& cl) {return cl.run();} ); 
JLEngine.method("EngineRun", [](poplar::Engine& cl, unsigned int a) {return cl.run(a);} ); 
JLEngine.method("EngineRun", [](poplar::Engine& cl, unsigned int a, const std::string & b) {return cl.run(a, b);} ); 
}
// poplar::Engine::loadAndRun(const poplar::Device &, unsigned int)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineLoadAndRun", [](poplar::Engine& cl, const poplar::Device & a) {return cl.loadAndRun(a);} ); 
JLEngine.method("EngineLoadAndRun", [](poplar::Engine& cl, const poplar::Device & a, unsigned int b) {return cl.loadAndRun(a, b);} ); 
}
// poplar::Engine::getTimeStamp()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineGetTimeStamp", [](poplar::Engine& cl) {return cl.getTimeStamp();} ); 
}
// poplar::Engine::reportTiming(const poplar::Engine::TimerTimePoint &, const poplar::Engine::TimerTimePoint &)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineReportTiming", [](poplar::Engine& cl, const poplar::Engine::TimerTimePoint & a, const poplar::Engine::TimerTimePoint & b) {return cl.reportTiming(a, b);} ); 
}
// poplar::Engine::getGraphProfile()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineGetGraphProfile", [](poplar::Engine& cl) {return cl.getGraphProfile();} ); 
}
// poplar::Engine::getExecutionProfile()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineGetExecutionProfile", [](poplar::Engine& cl) {return cl.getExecutionProfile();} ); 
}
// poplar::Engine::getProfile()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineGetProfile", [](poplar::Engine& cl) {return cl.getProfile();} ); 
}
// poplar::Engine::resetExecutionProfile()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineResetExecutionProfile", [](poplar::Engine& cl) {return cl.resetExecutionProfile();} ); 
}
// poplar::Engine::disableExecutionProfiling()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineDisableExecutionProfiling", [](poplar::Engine& cl) {return cl.disableExecutionProfiling();} ); 
}
// poplar::Engine::enableExecutionProfiling()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineEnableExecutionProfiling", [](poplar::Engine& cl) {return cl.enableExecutionProfiling();} ); 
}
// poplar::Engine::readTensor(std::string, void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineReadTensor", [](poplar::Engine& cl, std::string a, void * b) {return cl.readTensor(a, b);} ); 
}
// poplar::Engine::readTensor(std::string, void *, void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineReadTensor", [](poplar::Engine& cl, std::string a, void * b, void * c) {return cl.readTensor(a, b, c);} ); 
}
// poplar::Engine::writeTensor(std::string, const void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineWriteTensor", [](poplar::Engine& cl, std::string a, const void * b) {return cl.writeTensor(a, b);} ); 
}
// poplar::Engine::writeTensor(std::string, const void *, const void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineWriteTensor", [](poplar::Engine& cl, std::string a, const void * b, const void * c) {return cl.writeTensor(a, b, c);} ); 
}
// poplar::Engine::connectStream(std::string, void *, void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineConnectStream", [](poplar::Engine& cl, std::string a, void * b, void * c) {return cl.connectStream(a, b, c);} ); 
}
// poplar::Engine::connectStream(const poplar::DataStream &, void *, void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineConnectStream", [](poplar::Engine& cl, const poplar::DataStream & a, void * b, void * c) {return cl.connectStream(a, b, c);} ); 
}
// poplar::Engine::connectStream(std::string, void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineConnectStream", [](poplar::Engine& cl, std::string a, void * b) {return cl.connectStream(a, b);} ); 
}
// poplar::Engine::connectStream(const poplar::DataStream &, void *)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineConnectStream", [](poplar::Engine& cl, const poplar::DataStream & a, void * b) {return cl.connectStream(a, b);} ); 
}
// poplar::Engine::copyFromRemoteBuffer(std::string, void *, int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineCopyFromRemoteBuffer", [](poplar::Engine& cl, std::string a, void * b, int c) {return cl.copyFromRemoteBuffer(a, b, c);} ); 
JLEngine.method("EngineCopyFromRemoteBuffer", [](poplar::Engine& cl, std::string a, void * b, int c, unsigned int d) {return cl.copyFromRemoteBuffer(a, b, c, d);} ); 
}
// poplar::Engine::copyFromRemoteBuffer(const poplar::RemoteBuffer &, void *, int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineCopyFromRemoteBuffer", [](poplar::Engine& cl, const poplar::RemoteBuffer & a, void * b, int c) {return cl.copyFromRemoteBuffer(a, b, c);} ); 
JLEngine.method("EngineCopyFromRemoteBuffer", [](poplar::Engine& cl, const poplar::RemoteBuffer & a, void * b, int c, unsigned int d) {return cl.copyFromRemoteBuffer(a, b, c, d);} ); 
}
// poplar::Engine::copyToRemoteBuffer(void *, std::string, int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineCopyToRemoteBuffer", [](poplar::Engine& cl, void * a, std::string b, int c) {return cl.copyToRemoteBuffer(a, b, c);} ); 
JLEngine.method("EngineCopyToRemoteBuffer", [](poplar::Engine& cl, void * a, std::string b, int c, unsigned int d) {return cl.copyToRemoteBuffer(a, b, c, d);} ); 
}
// poplar::Engine::copyToRemoteBuffer(void *, const poplar::RemoteBuffer &, int, unsigned int)__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineCopyToRemoteBuffer", [](poplar::Engine& cl, void * a, const poplar::RemoteBuffer & b, int c) {return cl.copyToRemoteBuffer(a, b, c);} ); 
JLEngine.method("EngineCopyToRemoteBuffer", [](poplar::Engine& cl, void * a, const poplar::RemoteBuffer & b, int c, unsigned int d) {return cl.copyToRemoteBuffer(a, b, c, d);} ); 
}
// poplar::Engine::listStreams()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineListStreams", [](poplar::Engine& cl) {return cl.listStreams();} ); 
}
// poplar::Engine::getEngineOptions()__CXXMethod
{ using namespace poplar; 
JLEngine.method("EngineGetEngineOptions", [](poplar::Engine& cl) {return cl.getEngineOptions();} ); 
}
// poplar::compileGraph(const poplar::Graph &, ArrayRef<program::Program>, const poplar::OptionFlags &, poplar::ProgressFunc)__FunctionDecl
{ using namespace poplar; 
mod.method("PoplarCompileGraph", [](const poplar::Graph & a, ArrayRef<program::Program> b, const poplar::OptionFlags & c, poplar::ProgressFunc d) {return poplar::compileGraph(a, b, c, d);} ); }
// poplar::IPUModel::IPUModel(const char *)__CXXConstructor
{ using namespace poplar; 
JLIPUModel.constructor<const char *>();
}
// poplar::IPUModel::RelativeSyncDelayType::AUTO__EnumConstantDecl
mod.set_const("IPUModelRelativeSyncDelayTypeIPUModelAUTO", poplar::IPUModel::RelativeSyncDelayType::AUTO);
// poplar::IPUModel::RelativeSyncDelayType::NO_DELAY__EnumConstantDecl
mod.set_const("IPUModelRelativeSyncDelayTypeIPUModelNO_DELAY", poplar::IPUModel::RelativeSyncDelayType::NO_DELAY);
// poplar::IPUModel::createDevice(poplar::OptionFlags, bool, unsigned int)__CXXMethod
{ using namespace poplar; 
JLIPUModel.method("IPUModelCreateDevice", [](poplar::IPUModel& cl) {return cl.createDevice();} ); 
JLIPUModel.method("IPUModelCreateDevice", [](poplar::IPUModel& cl, poplar::OptionFlags a) {return cl.createDevice(a);} ); 
JLIPUModel.method("IPUModelCreateDevice", [](poplar::IPUModel& cl, poplar::OptionFlags a, bool b) {return cl.createDevice(a, b);} ); 
JLIPUModel.method("IPUModelCreateDevice", [](poplar::IPUModel& cl, poplar::OptionFlags a, bool b, unsigned int c) {return cl.createDevice(a, b, c);} ); 
}
// popops::varianceToInvStdDev(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const poplar::Type, const std::string &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsVarianceToInvStdDev", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const poplar::Type e, const std::string & f) {return popops::varianceToInvStdDev(a, b, c, d, e, f);} ); }
// popops::varianceToInvStdDev(poplar::Graph &, const poplar::Tensor &, const float, poplar::program::Sequence &, const poplar::Type, const std::string &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsVarianceToInvStdDev", [](poplar::Graph & a, const poplar::Tensor & b, const float c, poplar::program::Sequence & d, const poplar::Type e, const std::string & f) {return popops::varianceToInvStdDev(a, b, c, d, e, f);} ); }
// popops::invStdDevToVariance(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const poplar::Type, const std::string &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsInvStdDevToVariance", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const poplar::Type e, const std::string & f) {return popops::invStdDevToVariance(a, b, c, d, e, f);} ); }
// popops::invStdDevToVariance(poplar::Graph &, const poplar::Tensor &, const float, poplar::program::Sequence &, const poplar::Type, const std::string &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsInvStdDevToVariance", [](poplar::Graph & a, const poplar::Tensor & b, const float c, poplar::program::Sequence & d, const poplar::Type e, const std::string & f) {return popops::invStdDevToVariance(a, b, c, d, e, f);} ); }
// popops::abs(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAbs", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::abs(a, b, c, d, e);} ); }
// popops::absInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAbsInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::absInPlace(a, b, c, d, e);} ); }
// popops::asin(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAsin", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::asin(a, b, c, d, e);} ); }
// popops::asinInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAsinInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::asinInPlace(a, b, c, d, e);} ); }
// popops::bitwiseNot(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseNot", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::bitwiseNot(a, b, c, d, e);} ); }
// popops::bitwiseNotInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseNotInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::bitwiseNotInPlace(a, b, c, d, e);} ); }
// popops::ceil(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCeil", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::ceil(a, b, c, d, e);} ); }
// popops::ceilInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCeilInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::ceilInPlace(a, b, c, d, e);} ); }
// popops::countLeadingZeros(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCountLeadingZeros", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::countLeadingZeros(a, b, c, d, e);} ); }
// popops::countLeadingZerosInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCountLeadingZerosInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::countLeadingZerosInPlace(a, b, c, d, e);} ); }
// popops::cos(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCos", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::cos(a, b, c, d, e);} ); }
// popops::cosInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCosInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::cosInPlace(a, b, c, d, e);} ); }
// popops::exp(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsExp", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::exp(a, b, c, d, e);} ); }
// popops::expInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsExpInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::expInPlace(a, b, c, d, e);} ); }
// popops::expm1(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsExpm1", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::expm1(a, b, c, d, e);} ); }
// popops::expm1InPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsExpm1InPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::expm1InPlace(a, b, c, d, e);} ); }
// popops::floor(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsFloor", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::floor(a, b, c, d, e);} ); }
// popops::floorInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsFloorInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::floorInPlace(a, b, c, d, e);} ); }
// popops::inv(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsInv", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::inv(a, b, c, d, e);} ); }
// popops::invInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsInvInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::invInPlace(a, b, c, d, e);} ); }
// popops::log(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLog", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::log(a, b, c, d, e);} ); }
// popops::logInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::logInPlace(a, b, c, d, e);} ); }
// popops::log1p(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLog1P", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::log1p(a, b, c, d, e);} ); }
// popops::log1pInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLog1PInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::log1pInPlace(a, b, c, d, e);} ); }
// popops::logicalNot(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogicalNot", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::logicalNot(a, b, c, d, e);} ); }
// popops::logicalNotInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogicalNotInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::logicalNotInPlace(a, b, c, d, e);} ); }
// popops::neg(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsNeg", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::neg(a, b, c, d, e);} ); }
// popops::negInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsNegInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::negInPlace(a, b, c, d, e);} ); }
// popops::popcount(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsPopcount", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::popcount(a, b, c, d, e);} ); }
// popops::popcountInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsPopcountInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::popcountInPlace(a, b, c, d, e);} ); }
// popops::signum(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSignum", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::signum(a, b, c, d, e);} ); }
// popops::signumInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSignumInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::signumInPlace(a, b, c, d, e);} ); }
// popops::sin(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSin", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::sin(a, b, c, d, e);} ); }
// popops::sinInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSinInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::sinInPlace(a, b, c, d, e);} ); }
// popops::tan(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsTan", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::tan(a, b, c, d, e);} ); }
// popops::tanInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsTanInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::tanInPlace(a, b, c, d, e);} ); }
// popops::tanh(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsTanh", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::tanh(a, b, c, d, e);} ); }
// popops::tanhInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsTanhInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::tanhInPlace(a, b, c, d, e);} ); }
// popops::round(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsRound", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::round(a, b, c, d, e);} ); }
// popops::roundInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsRoundInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::roundInPlace(a, b, c, d, e);} ); }
// popops::sqrt(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSqrt", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::sqrt(a, b, c, d, e);} ); }
// popops::sqrtInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSqrtInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::sqrtInPlace(a, b, c, d, e);} ); }
// popops::square(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSquare", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::square(a, b, c, d, e);} ); }
// popops::squareInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSquareInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::squareInPlace(a, b, c, d, e);} ); }
// popops::sigmoid(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSigmoid", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::sigmoid(a, b, c, d, e);} ); }
// popops::sigmoidInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSigmoidInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::sigmoidInPlace(a, b, c, d, e);} ); }
// popops::rsqrt(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsRsqrt", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::rsqrt(a, b, c, d, e);} ); }
// popops::rsqrtInPlace(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsRsqrtInPlace", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::rsqrtInPlace(a, b, c, d, e);} ); }
// popops::isFinite(poplar::Graph &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsIsFinite", [](poplar::Graph & a, const poplar::Tensor & b, poplar::program::Sequence & c, const std::string & d, const poplar::OptionFlags & e) {return popops::isFinite(a, b, c, d, e);} ); }
// popops::checkTypes<>(poplar::Type, float)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCheckTypes<>", [](poplar::Type a, float b) {return popops::checkTypes<>(a, b);} ); }
// popops::checkTypes<>(poplar::Type, double)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsCheckTypes<>", [](poplar::Type a, double b) {return popops::checkTypes<>(a, b);} ); }
// popops::add(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAdd", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::add(a, b, c, d, e, f);} ); }
// popops::addInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAddInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::addInPlace(a, b, c, d, e, f);} ); }
// popops::atan2(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAtan2", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::atan2(a, b, c, d, e, f);} ); }
// popops::atan2InPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAtan2InPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::atan2InPlace(a, b, c, d, e, f);} ); }
// popops::bitwiseAnd(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseAnd", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseAnd(a, b, c, d, e, f);} ); }
// popops::bitwiseAndInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseAndInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseAndInPlace(a, b, c, d, e, f);} ); }
// popops::bitwiseOr(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseOr", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseOr(a, b, c, d, e, f);} ); }
// popops::bitwiseOrInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseOrInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseOrInPlace(a, b, c, d, e, f);} ); }
// popops::bitwiseXor(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseXor", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseXor(a, b, c, d, e, f);} ); }
// popops::bitwiseXorInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseXorInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseXorInPlace(a, b, c, d, e, f);} ); }
// popops::bitwiseXnor(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseXnor", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseXnor(a, b, c, d, e, f);} ); }
// popops::bitwiseXnorInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsBitwiseXnorInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::bitwiseXnorInPlace(a, b, c, d, e, f);} ); }
// popops::div(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsDiv", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::div(a, b, c, d, e, f);} ); }
// popops::divInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsDivInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::divInPlace(a, b, c, d, e, f);} ); }
// popops::eq(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsEq", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::eq(a, b, c, d, e, f);} ); }
// popops::eqInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsEqInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::eqInPlace(a, b, c, d, e, f);} ); }
// popops::gteq(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsGteq", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::gteq(a, b, c, d, e, f);} ); }
// popops::gteqInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsGteqInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::gteqInPlace(a, b, c, d, e, f);} ); }
// popops::gt(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsGt", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::gt(a, b, c, d, e, f);} ); }
// popops::gtInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsGtInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::gtInPlace(a, b, c, d, e, f);} ); }
// popops::invStdDevToVariance(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsInvStdDevToVariance", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::invStdDevToVariance(a, b, c, d, e, f);} ); }
// popops::invStdDevToVarianceInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsInvStdDevToVarianceInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::invStdDevToVarianceInPlace(a, b, c, d, e, f);} ); }
// popops::lteq(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLteq", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::lteq(a, b, c, d, e, f);} ); }
// popops::lteqInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLteqInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::lteqInPlace(a, b, c, d, e, f);} ); }
// popops::logicalAnd(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogicalAnd", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::logicalAnd(a, b, c, d, e, f);} ); }
// popops::logicalAndInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogicalAndInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::logicalAndInPlace(a, b, c, d, e, f);} ); }
// popops::logicalOr(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogicalOr", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::logicalOr(a, b, c, d, e, f);} ); }
// popops::logicalOrInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLogicalOrInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::logicalOrInPlace(a, b, c, d, e, f);} ); }
// popops::lt(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLt", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::lt(a, b, c, d, e, f);} ); }
// popops::ltInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsLtInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::ltInPlace(a, b, c, d, e, f);} ); }
// popops::max(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsMax", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::max(a, b, c, d, e, f);} ); }
// popops::maxInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsMaxInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::maxInPlace(a, b, c, d, e, f);} ); }
// popops::min(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsMin", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::min(a, b, c, d, e, f);} ); }
// popops::minInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsMinInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::minInPlace(a, b, c, d, e, f);} ); }
// popops::mul(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsMul", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::mul(a, b, c, d, e, f);} ); }
// popops::mulInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsMulInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::mulInPlace(a, b, c, d, e, f);} ); }
// popops::neq(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsNeq", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::neq(a, b, c, d, e, f);} ); }
// popops::neqInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsNeqInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::neqInPlace(a, b, c, d, e, f);} ); }
// popops::pow(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsPow", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::pow(a, b, c, d, e, f);} ); }
// popops::powInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsPowInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::powInPlace(a, b, c, d, e, f);} ); }
// popops::rem(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsRem", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::rem(a, b, c, d, e, f);} ); }
// popops::remInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsRemInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::remInPlace(a, b, c, d, e, f);} ); }
// popops::shiftLeft(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsShiftLeft", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::shiftLeft(a, b, c, d, e, f);} ); }
// popops::shiftLeftInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsShiftLeftInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::shiftLeftInPlace(a, b, c, d, e, f);} ); }
// popops::shiftRight(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsShiftRight", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::shiftRight(a, b, c, d, e, f);} ); }
// popops::shiftRightInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsShiftRightInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::shiftRightInPlace(a, b, c, d, e, f);} ); }
// popops::shiftRightSignExtend(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsShiftRightSignExtend", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::shiftRightSignExtend(a, b, c, d, e, f);} ); }
// popops::shiftRightSignExtendInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsShiftRightSignExtendInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::shiftRightSignExtendInPlace(a, b, c, d, e, f);} ); }
// popops::sub(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSub", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::sub(a, b, c, d, e, f);} ); }
// popops::subInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSubInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::subInPlace(a, b, c, d, e, f);} ); }
// popops::varianceToInvStdDev(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsVarianceToInvStdDev", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::varianceToInvStdDev(a, b, c, d, e, f);} ); }
// popops::varianceToInvStdDevInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsVarianceToInvStdDevInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, poplar::program::Sequence & d, const std::string & e, const poplar::OptionFlags & f) {return popops::varianceToInvStdDevInPlace(a, b, c, d, e, f);} ); }
// popops::select(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSelect", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, const poplar::Tensor & d, poplar::program::Sequence & e, const std::string & f, const poplar::OptionFlags & g) {return popops::select(a, b, c, d, e, f, g);} ); }
// popops::selectInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsSelectInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, const poplar::Tensor & d, poplar::program::Sequence & e, const std::string & f, const poplar::OptionFlags & g) {return popops::selectInPlace(a, b, c, d, e, f, g);} ); }
// popops::clamp(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsClamp", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, const poplar::Tensor & d, poplar::program::Sequence & e, const std::string & f, const poplar::OptionFlags & g) {return popops::clamp(a, b, c, d, e, f, g);} ); }
// popops::clampInPlace(poplar::Graph &, const poplar::Tensor &, const poplar::Tensor &, const poplar::Tensor &, poplar::program::Sequence &, const std::string &, const poplar::OptionFlags &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsClampInPlace", [](poplar::Graph & a, const poplar::Tensor & b, const poplar::Tensor & c, const poplar::Tensor & d, poplar::program::Sequence & e, const std::string & f, const poplar::OptionFlags & g) {return popops::clampInPlace(a, b, c, d, e, f, g);} ); }
// popops::addCodelets(poplar::Graph &)__FunctionDecl
{ using namespace popops; 
mod.method("PopopsAddCodelets", [](poplar::Graph & a) {return popops::addCodelets(a);} ); }
